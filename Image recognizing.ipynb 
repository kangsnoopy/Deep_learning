{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "NJTGobUHneog",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import numpy as np\n",
    "from keras.utils.np_utils import to_categorical\n",
    "from keras.utils import np_utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "jJPTyq8bnwTY",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    ""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1 Source code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "213EeIz-neop",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_a_drawing(figsize, U, V, noise=0.0):\n",
    "    fig = plt.figure(figsize=(figsize,figsize))\n",
    "    ax = plt.subplot(111)  # subplot(nrows, ncols, index, **kwargs)\n",
    "    plt.axis('Off')\n",
    "    ax.set_xlim(0,figsize)    # the order of the axe: from 0 to figsize\n",
    "    ax.set_ylim(0,figsize)\n",
    "    ax.fill(U, V, \"k\")\n",
    "    fig.canvas.draw()     # \n",
    "      # np.frombuffer: Interpret a buffer as a 1-dimensional array.\n",
    "      # fig.canvas.tostring_rgb(): dump the rgb buffer to a string\n",
    "    imdata = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)[::3].astype(np.float32)\n",
    "    imdata = imdata + noise * np.random.random(imdata.size)   # noise = 0.0 ?\n",
    "    plt.close(fig)\n",
    "    \n",
    "    # print imdata, np.shape(imdata)\n",
    "    \n",
    "    return imdata\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "GJeEqWPzneos",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "# im = generate_a_drawing(10, np.zeros(4),np.zeros(4),10)\n",
    "# plt.imshow(im.reshape(72,72), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "6JCJT2U8neou",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_a_rectangle(noise=0.0, free_location=False):\n",
    "    figsize = 1.0    \n",
    "    U = np.zeros(4)\n",
    "    V = np.zeros(4)\n",
    "    if free_location:\n",
    "        corners = np.random.random(4)   # 4 random numbers from 0 to 1\n",
    "        top = max(corners[0], corners[1])\n",
    "        bottom = min(corners[0], corners[1])\n",
    "        left = min(corners[2], corners[3])\n",
    "        right = max(corners[2], corners[3])\n",
    "    else:\n",
    "        side = (0.3 + 0.7 * np.random.random()) * figsize    # side is (0.3, 1]\n",
    "        top = figsize/2 + side/2\n",
    "        bottom = figsize/2 - side/2\n",
    "        left = bottom\n",
    "        right = top\n",
    "    U[0] = U[1] = top\n",
    "    U[2] = U[3] = bottom\n",
    "    V[0] = V[3] = left\n",
    "    V[1] = V[2] = right\n",
    "    return generate_a_drawing(figsize, U, V, noise)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "id": "Fr35ofrjneox",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "37d9ab68-f129-459f-e8cb-092cd4173c02",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518121563859E12,
     "user_tz": -60.0,
     "elapsed": 1318.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9e413fcd0>"
      ]
     },
     "execution_count": 15,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9e40f7950>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "im = generate_a_rectangle(10, False)   # free_location = True --- random shape and location\n",
    "plt.imshow(im.reshape(72,72), cmap='gray')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "fSyQz449neo1",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_a_disk(noise=0.0, free_location=False):\n",
    "    figsize = 1.0\n",
    "    if free_location:\n",
    "        center = np.random.random(2)\n",
    "    else:\n",
    "        center = (figsize/2, figsize/2)\n",
    "    radius = (0.3 + 0.7 * np.random.random()) * figsize/2\n",
    "    N = 50\n",
    "    U = np.zeros(N)\n",
    "    V = np.zeros(N)\n",
    "    i = 0\n",
    "    for t in np.linspace(0, 2*np.pi, N):\n",
    "        U[i] = center[0] + np.cos(t) * radius\n",
    "        V[i] = center[1] + np.sin(t) * radius\n",
    "        i = i + 1\n",
    "    return generate_a_drawing(figsize, U, V, noise)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "id": "7phWnV4Aneo3",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "0091743f-5aec-4e89-fd33-87a993136c4d",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518121587418E12,
     "user_tz": -60.0,
     "elapsed": 4519.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9e40b83d0>"
      ]
     },
     "execution_count": 17,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nH2t950Ag0Bk8BRx+L+d8Oed8WYvCDX8g6dckvT7n/BxJl1JK33VrmxkIBG4Gban7WyT9kKSP5Zw/\nudxXlU3+EJ1Eyf88GngqVeSpmeXJtkJeTtIW0ypA2Z/Dw0Ntbm7q8PAQPdJUaZTEKuRh9YSXelY7\nKJaA4MmJT9ptT9VXC4933JMhqBRCkflhYc2MuiSNZZvtPTzXt+2m1QKPHr4J7omeUnqGpP+QNJH0\nf+ZPR5ZNtvDURiPcTDVOmgD0chynOmad3eVd/riZvnmqa9IxZNN72k0/zp5iBm2f/a16V25m3Alt\nK7x6rtO22nCJNr38EUnvrtnvK9C8BDktPHnD6OvTdi2YvkSeaCF6uaUbHXXVF51eTHLMkbOFJh+t\nyVpQKmfSL5AEmBhZdXzpmPLIXslh5Skk6dFWNDGGtl/0piQWdfcmZ6QFfdGpD16GadFmol/WosDi\nXIt66RWOLJtsEwfSS0wU2vMlpgHxhDZSBhvP16oEaegtymqcFSgbDI0L6ck9FWepzbZtlEmHsvaQ\nl5p+qC1ovydMlXKu2/Z4VjHK65K+vfwAbG1t6eDgAE0IKk9F2XbalsOmFaoSLoKfUnqCpIdzzgc5\n50NJ/5pSeu7yzy/REWWTA4HAIwvvF/1rtbDFK/yEpHellIaS/ibnfN+JtywQCJwYBsdZfA8EAqcL\nIYENBHqAmOiBQA8QEz0Q6AFiogcCPUBM9ECgB4iJHgj0AJ3Eo0tSSumdkp6phbLu9SYo5swgpfR2\nSc/TYlzfJumTkv5Q0kjSlyW9Mudcn570lCKltCPpnyT9gqSP6uz39xWS3qhFzMdbJH1Gp6DPnXzR\nU0ovkPSknPOzJN0j6de7uG+XSCm9UNJTl318sRahvD8v6bdyzs+T9FlJP/wINvFW4c2SHlhun+n+\nppQeq0Wo9nMl3SnpLp2SPndF3b9N0vskKef8L5JuTynd1tG9u8LHJH3/cvtBSee1iA+4d7mvCuc9\nM0gpPVnSUyR9YLnrss5wf7Xoz30556s55y/nnF+tU9Lnrqj74yX9nfn/V5b7Huro/rccOeeppGvL\n/94j6YOSXmRoXKtw3lOCd0j6cUl3L/9//oz394mSzqWU7pV0u6S36pT0+ZFyxrUKbT1NSCndpcVE\n//HiT2eqzymlV0n6RM7583DImervEgMtIjdfIukHJf2+1vv5qO1zVxP9S1p8wSs8QQvHxZlCSulF\nkt4k6btyzlckPbx0VkmOcN5Thu+RdFdK6a+1yFXwMzrb/ZWk/5F0f855knP+nKSrkq6ehj53NdE/\nIullkpRSepqkL+Wcr3Z0706QUrok6Vck3ZlzrpxT90l66XL7pTpD4bw555fnnJ+Rc36mpN/Vwut+\nZvu7xEckfWtKabh0zF3QKelzZ9FrKaVfkvR8STNJr805f7qTG3eElNKrtbDZ/s3svluLSbAt6YuS\nfmgZz3+mkFJ6q6QvSPqwpPfoDPc3pfQaLUwzSfpFLZZQH/V9jjDVQKAHCGVcINADxEQPBHqAmOiB\nQA8QEz0Q6AFiogcCPUBM9ECgB4iJHgj0ADHRA4Ee4P8BhFUUFa7IhBYAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9e4105190>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "im = generate_a_disk(10,False)\n",
    "plt.imshow(im.reshape(72,72), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "9_3S6fGAneo6",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_a_triangle(noise=0.0, free_location=False):\n",
    "    figsize = 1.0\n",
    "    if free_location:\n",
    "        U = np.random.random(3)\n",
    "        V = np.random.random(3)\n",
    "    else:\n",
    "        size = (0.3 + 0.7 * np.random.random())*figsize/2\n",
    "        middle = figsize/2\n",
    "        U = (middle, middle+size, middle-size)\n",
    "        V = (middle+size, middle-size, middle-size)\n",
    "    imdata = generate_a_drawing(figsize, U, V, noise)\n",
    "    return [imdata, [U[0], V[0], U[1], V[1], U[2], V[2]]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "id": "vSy79m7wneo7",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "d6f8f4c6-1d88-442e-a6a6-67141c515f17",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518121608051E12,
     "user_tz": -60.0,
     "elapsed": 2550.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9e1f0add0>"
      ]
     },
     "execution_count": 19,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD7CAYAAABDsImYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJztnW+MbddZ3p85c865M3OPZ+5cO7Zj\nh8RyhBaK8qGCRkpCQkxpm1CMLEjafIhCCqmSooBStYh+gIYUKtEGpUG0iEYCEZKoErQfIIhSIkdV\ngxRoA2pJqehqQBAlsWv72jNzZ+78uffMTD+c2SfPXt6/M3uur8/13P0+kuV996y99lpr73X2s971\nvs+7cHx8rEAgcGejd7sbEAgEXnzERA8EOoCY6IFABxATPRDoAGKiBwIdQEz0QKAD6N/shSmlj0l6\nvaRjSR/MOX/xlrUqEAjcUtzUFz2l9BZJ35xzfoOk90r6hVvaqkAgcEtxs1/075L0m5KUc/6zlNJ6\nSmk153y1qfD+/v6xJA2HQ21tbU3P93rf+J25cOGCl28sMxwOG88fHR01Hnv5w8PDxmvH4/H0+Pr1\n69PjixcvNp5fWlqaHh8cHMjR739jOMfjsS5cuKCDg4Naf/x6r9fb6vXs7e019m11dbXx/LVr1xrr\n9LYuLi5OjweDwfR4d3e38Vofi6tXv/GI/b4LCwuSpLvuukuO6rxUH3fHzs5OY53eNnreft6dv/xa\nf8Y3btyo3dvL+bHfg5zKDg4OtLy8rL29PY1Go+l5f2bef6/H33e6l1+7vb09PaZxXFtbW2j8g25+\njX6/pGfs38+cnJsJauCdiq71V6r/iHQB56W/N71GL4C/JNLk61C99Ovr66dW5l+9WwX/Sjr8V3x5\neflM11J5r3d5eRnLzbq+qX0E/0FZW1u76Xu1GXeq33HWl9+/hi8GvD3+JZ2FNj/S1bMp299mrM96\nrzbzZhZudqI/ofoX/AFJT1LhirqurKwgLafJtLm5OT32l8yp6MrKyvTYqaXX7w/bqZU/FKdKfkzU\nu3yhvQ8bGxtaX1/XxsYGUlCnkX4/p+Xef6/fX1i/1pcoNEZOFZ3Wen/oOXn9TtOrMR2NRrUlCdFV\nX8IRjfVn48/VlxUOv5e33yeJL22k+rKk/FsFf04lta6e8aVLlxqvJeruddLSkJ6H1+nv1qwf2Jvl\nlp+V9A5JSil9q6Qncs7bsy8JBAK3Czc10XPOX5D0xymlL2hicf/ALW1VIBC4pViYR5jq7u7usTSh\nj07NnI45DfQyTkeI7jmcZjp1JUpE1ni/to3Ft6xrcXFRKysr2t3drVFup2l+3inYLKrYBBov2nXw\ncXfq6lZ3smZT+aoN5VrS++LlfXmysbExPfbria6Xux1NbfNx8DaU9LapD1J9qeNLPcfKyooGg4Fu\n3LhRG1+qx+FU3EG7Rv7sfbnl9bwYVvdAIHCOEBM9EOgAbtX22kw4rXHq6vTQKZRTWqLfbpF1auYU\n2GmN00+yNBMt92WCW2a9vFSnaVW9y8vLtXLeBz/vyxKnbN5Pb7eXcYrr/SeLr9NmH3eHj4sfk+MN\nLbF8Sebj420juk67Aw7f2vJn5s/J36dy+UNLOr+eliuHh4caDAY6PDysjUu5hKvg7z69pz5e3h93\nKvJrvW2zEF/0QKADiIkeCHQAc6HuTpecZjttckrkNJMcTJzukEOK1++WU6JiTpv8vNNGos8l9vb2\ntLKyMv1/BXeAIQcd7wNZ/L0/5AxDjj5Oj4lm+nKFlk8+Rm38xP3Yr/U6ycGG+kLvgffLn3e53HJK\n7OXo2Xq9VZnhcFh7N2k54f3x98D74++Xj7u3x4+9/b4kKxFf9ECgA4iJHgh0AHOh7k4t3QLqVNHP\nk8MBLQGcxjrdIT9gpzvkiOEUkvy7S//8Jl/mGzduPI8uVnAq18YP3NvqFlwfFy9PtNkt+W5dJoch\ncjBqijFYXl6uxSSQ5dyfDbWBliTkdOR993b6MqFtwI231ev1vm1ubury5cva3Nys0XXvj593x6DL\nly83tpUcuGhpSzEiJeKLHgh0ADHRA4EOYO6+7uSs4nTVrYdkVXWQKonTHXKwoXBUsoKTiklZb7/f\nn6qPOOX2MkQPyTeenEAcTv0orNf7QA5DXt7HjpxKKpo9GAxq9ZPjibezjR+3L5l818DbQ9Z4st5L\n9eWQ35t2bLytTsufe+656bE7APlYeLt9TL0NFJZMS45CISd83QOBLiMmeiDQAczF6l7RwJWVFbTs\nOk1x+uL0iCzzTl/csknlyXedrNfeTm+PU7HyHlW5paUl9I8nekjn/d5O6Uk0svTLruDj5X3zPns9\nRJW9PdW9BoNBbRlG8lROocln3q3u3k5fkjjdJqrr40Bho9LznWkqUMzAeDxWv9/XeDyu1etCjrRr\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ffa1f82d690>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "[im, v] = generate_a_triangle(20, False)\n",
    "plt.imshow(im.reshape(72,72), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "rJVld0ylneo-",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "# im = generate_a_rectangle(10, True)\n",
    "# plt.imshow(im.reshape(72,72), cmap='gray')\n",
    "# \n",
    "# im = generate_a_disk(10)\n",
    "# plt.imshow(im.reshape(72,72), cmap='gray')\n",
    "# \n",
    "# [im, v] = generate_a_triangle(20, False)\n",
    "# plt.imshow(im.reshape(72,72), cmap='gray')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "ABGAsSJhnepA",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_dataset_classification(nb_samples, noise=0.0, free_location=False):\n",
    "    # Getting im_size:\n",
    "    im_size = generate_a_rectangle().shape[0]\n",
    "    X = np.zeros([nb_samples,im_size])\n",
    "    Y = np.zeros(nb_samples)\n",
    "    print('Creating data:')\n",
    "    for i in range(nb_samples):\n",
    "        if i % 10 == 0:\n",
    "            print(i)\n",
    "        category = np.random.randint(3)\n",
    "        if category == 0:\n",
    "            X[i] = generate_a_rectangle(noise, free_location)\n",
    "        elif category == 1: \n",
    "            X[i] = generate_a_disk(noise, free_location)\n",
    "        else:\n",
    "            [X[i], V] = generate_a_triangle(noise, free_location)\n",
    "        Y[i] = category\n",
    "    X = (X + noise) / (255 + 2 * noise)\n",
    "    return [X, Y]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "ucVuQzSonepB",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_test_set_classification():\n",
    "    np.random.seed(42)\n",
    "    [X_test, Y_test] = generate_dataset_classification(300, 20, True)\n",
    "    Y_test = np_utils.to_categorical(Y_test, 3) \n",
    "    return [X_test, Y_test]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "sDW6p5_7nepD",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_dataset_regression(nb_samples, noise=0.0):\n",
    "    # Getting im_size:\n",
    "    im_size = generate_a_triangle()[0].shape[0]\n",
    "    X = np.zeros([nb_samples,im_size])\n",
    "    Y = np.zeros([nb_samples, 6])\n",
    "    print('Creating data:')\n",
    "    for i in range(nb_samples):\n",
    "        if i % 10 == 0:\n",
    "            print(i)\n",
    "        [X[i], Y[i]] = generate_a_triangle(noise, True)\n",
    "    X = (X + noise) / (255 + 2 * noise)\n",
    "    return [X, Y]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "FjjftpZknepF",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.patches as patches\n",
    "\n",
    "def visualize_prediction(x, y):\n",
    "    fig, ax = plt.subplots(figsize=(5, 5))\n",
    "    I = x.reshape((72,72))\n",
    "    ax.imshow(I, extent=[-0.15,1.15,-0.15,1.15],cmap='gray')\n",
    "    ax.set_xlim([0,1])\n",
    "    ax.set_ylim([0,1])\n",
    "\n",
    "    xy = y.reshape(3,2)\n",
    "    tri = patches.Polygon(xy, closed=True, fill = False, edgecolor = 'r', linewidth = 5, alpha = 0.5)\n",
    "    ax.add_patch(tri)\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "wATAOJEinepG",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_test_set_regression():\n",
    "    np.random.seed(42)\n",
    "    [X_test, Y_test] = generate_dataset_regression(300, 20)\n",
    "    Y_test = np_utils.to_categorical(Y_test, 3) \n",
    "    return [X_test, Y_test]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "skkdRLKDnepI",
    "colab_type": "text"
   },
   "source": [
    "# Q2 Simple Classi\fcation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "vZ0gr3-xnepJ",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate training set using sample size = 300, noise = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "id": "uJ2iKEvdnepK",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 29.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 544.0
    },
    "collapsed": true,
    "outputId": "09cb7a08-e398-47e8-ffee-e4e56c736dc6",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123157994E12,
     "user_tz": -60.0,
     "elapsed": 12302.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating data:\n",
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n",
      "100\n",
      "110\n",
      "120\n",
      "130\n",
      "140\n",
      "150\n",
      "160\n",
      "170\n",
      "180\n",
      "190\n",
      "200\n",
      "210\n",
      "220\n",
      "230\n",
      "240\n",
      "250\n",
      "260\n",
      "270\n",
      "280\n",
      "290\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "[X_train, Y_train] = generate_dataset_classification(300, 20)\n",
    "Y_train = to_categorical(Y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "BZhGe2adnepP",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    ""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "WKocUv6unepQ",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "from keras.utils import to_categorical\n",
    "from keras.optimizers import SGD\n",
    "from keras.callbacks import EarlyStopping\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model: no hidden layer, using \"adam\" as optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "id": "cjQClkPMnepS",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 4.0
      },
      {
       "item_id": 5.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 765.0
    },
    "collapsed": true,
    "outputId": "a71983a4-cb10-4f6e-d1c4-78a026dbee5b",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123173466E12,
     "user_tz": -60.0,
     "elapsed": 1613.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 210 samples, validate on 90 samples\n",
      "Epoch 1/30\n",
      "210/210 [==============================] - 0s 786us/step - loss: 1.4883 - acc: 0.3667 - val_loss: 1.2058 - val_acc: 0.4778\n",
      "Epoch 2/30\n",
      "210/210 [==============================] - 0s 173us/step - loss: 0.9416 - acc: 0.5333 - val_loss: 0.7271 - val_acc: 0.6889\n",
      "Epoch 3/30\n",
      "210/210 [==============================] - 0s 175us/step - loss: 0.5801 - acc: 0.7143 - val_loss: 0.5881 - val_acc: 0.7889\n",
      "Epoch 4/30\n",
      "210/210 [==============================] - 0s 181us/step - loss: 0.4817 - acc: 0.8048 - val_loss: 0.4632 - val_acc: 0.7889\n",
      "Epoch 5/30\n",
      "210/210 [==============================] - 0s 169us/step - loss: 0.4439 - acc: 0.8095 - val_loss: 0.4564 - val_acc: 0.7667\n",
      "Epoch 6/30\n",
      "210/210 [==============================] - 0s 178us/step - loss: 0.3549 - acc: 0.8857 - val_loss: 0.5605 - val_acc: 0.6556\n",
      "Epoch 7/30\n",
      "210/210 [==============================] - 0s 167us/step - loss: 0.3514 - acc: 0.8286 - val_loss: 0.3305 - val_acc: 0.8556\n",
      "Epoch 8/30\n",
      "210/210 [==============================] - 0s 166us/step - loss: 0.3332 - acc: 0.8667 - val_loss: 0.2766 - val_acc: 0.9889\n",
      "Epoch 9/30\n",
      "210/210 [==============================] - 0s 175us/step - loss: 0.3069 - acc: 0.8571 - val_loss: 0.2698 - val_acc: 0.9000\n",
      "Epoch 10/30\n",
      "210/210 [==============================] - 0s 171us/step - loss: 0.2261 - acc: 0.9524 - val_loss: 0.2626 - val_acc: 0.8778\n",
      "Epoch 11/30\n",
      "210/210 [==============================] - 0s 179us/step - loss: 0.1989 - acc: 0.9524 - val_loss: 0.2215 - val_acc: 0.9889\n",
      "Epoch 12/30\n",
      "210/210 [==============================] - 0s 210us/step - loss: 0.1727 - acc: 0.9905 - val_loss: 0.1999 - val_acc: 1.0000\n",
      "Epoch 13/30\n",
      "210/210 [==============================] - 0s 188us/step - loss: 0.1587 - acc: 0.9905 - val_loss: 0.1960 - val_acc: 0.9778\n",
      "Epoch 14/30\n",
      "210/210 [==============================] - 0s 182us/step - loss: 0.1645 - acc: 0.9619 - val_loss: 0.1830 - val_acc: 0.9778\n",
      "Epoch 15/30\n",
      "210/210 [==============================] - 0s 172us/step - loss: 0.1346 - acc: 1.0000 - val_loss: 0.1790 - val_acc: 1.0000\n",
      "Epoch 16/30\n",
      "210/210 [==============================] - 0s 177us/step - loss: 0.1340 - acc: 0.9952 - val_loss: 0.1656 - val_acc: 1.0000\n",
      "Epoch 17/30\n",
      "210/210 [==============================] - 0s 182us/step - loss: 0.1187 - acc: 1.0000 - val_loss: 0.1494 - val_acc: 1.0000\n",
      "Epoch 18/30\n",
      "210/210 [==============================] - 0s 175us/step - loss: 0.1129 - acc: 1.0000 - val_loss: 0.1490 - val_acc: 1.0000\n",
      "Epoch 19/30\n",
      "210/210 [==============================] - 0s 208us/step - loss: 0.1050 - acc: 1.0000 - val_loss: 0.1344 - val_acc: 1.0000\n",
      "Epoch 20/30\n",
      "210/210 [==============================] - 0s 185us/step - loss: 0.1167 - acc: 0.9810 - val_loss: 0.1698 - val_acc: 0.9556\n",
      "Epoch 21/30\n",
      "210/210 [==============================] - 0s 174us/step - loss: 0.1315 - acc: 0.9667 - val_loss: 0.1857 - val_acc: 0.8889\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7ff9ddcacc90>"
      ]
     },
     "execution_count": 73,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_cols = X_train.shape[1]\n",
    "input_shape = (n_cols,)\n",
    "early_stopping_monitor = EarlyStopping(patience=2)\n",
    "\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(3,activation='softmax',input_shape=input_shape))\n",
    "\n",
    "sgd = SGD(lr = 0.01) \n",
    "\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'])\n",
    "model.fit(X_train, Y_train, epochs=30, validation_split = 0.3,\n",
    "          batch_size=32,callbacks = [early_stopping_monitor])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Prediction: give a shape and return its category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "id": "g4_KmD33nepW",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 34.0
    },
    "outputId": "fc6e1d49-b9b4-4276-ca75-c12a821c1bc1",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123179241E12,
     "user_tz": -60.0,
     "elapsed": 548.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "# generate_a_rectangle(),generate_a_disk(),generate_a_triangle()[0]\n",
    "\n",
    "X_test = generate_a_triangle()[0]\n",
    "X_test = X_test.reshape(1, X_test.shape[0])\n",
    "print model.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0vVOIS-AnepY",
    "colab_type": "text"
   },
   "source": [
    "#3 Visualization of the Solution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "id": "F-Gz3tHxnepZ",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "268e55da-3b9a-42f8-b3c0-7b1e681368dd",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123182252E12,
     "user_tz": -60.0,
     "elapsed": 692.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9dd914b10>"
      ]
     },
     "execution_count": 75,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD7CAYAAABDsImYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xm0ZWV1NfyJIoKgRjSAIMYAum0A\ngyAU0hUgUGLRl/RNYWERpFHsPgavvhJ0IC8qSF90goCALQgSkJRGQEpRkE4xO2rUNPRGERJFIfX9\ncWs/9dvXey63CFwozjPHcLjqcO45uz17rrnmWs8S8+fPT0VFxbMbz3m6N6CiouKpR73RKyqGAPVG\nr6gYAtQbvaJiCFBv9IqKIUC90SsqhgBLPtE/bJrmhCRTksxP8p62bX/wpG1VRUXFk4on9ERvmmaz\nJK9u23bDJLOSnPSkblVFRcWTiif6RN8yyWVJ0rbtT5qmeUnTNC9q2/Z3Y735tNNOm58ku+22W26+\n+eby+gte8IIS33LLLSVee+21S9y2bYlXW221Et99990lfuyxx0q81FJLlfgVr3hFiZ///OeX+Pe/\n/32Jv/a1r5X4da97XYlf+MIXlvhf//Vfx/zb0Zg2bVqJH3300ayzzjq55ZZb8rOf/ay8/j//8z8l\nXmaZZUr885//vMQrrrhiiddYY40S33fffSX+05/+VOLnPGfh77XHcYcddijxPffcU+IrrriixHvu\nuWeJ//u//7vEV111VYk33XTTEv/VX/1ViT1/1113XZJkn332ySWXXFJeX3PNNUv8j//4jyX2WK+w\nwgolvvPOO0s8ZcqUMbftn/7pn8aMl19++RJvsMEGJfZcfvGLX4xw36655poS//rXvy7xW9/61hL/\n+7//e4mnT5+eN7zhDfnxj3+cU089tby+/vrrl/ilL31pib/61a+WeJNNNimx1+9PfvKTEm+77bYl\nft7znjfm+7///e+X+Oijj14iA/BEc/SVktzPv+9f8Nq4cKeHAcsuu+zTvQmTjpe97GVP9yZMKvyx\neyZjiSdigW2a5swkV7Zt+7UF//5Okne2bfvPY73/17/+9fxhu8krKp4GDHyiP1Hqflf6T/CVk9w9\n4L2FKs6cOTOHHHJIeV0qftNNN5X41a9+dYk333zzEku7tt9++xL/8pe/LPFvfvObEm+55ZYlvvXW\nW0v8H//xHyWWKkm93Z5tttmmxHfccUeJ/+Vf/iVi7733LvHcuXNzzDHH5Mgjj+xRR+nlt7/97RL/\n9V//dYn/67/+q8R/+MMfSvz2t7+9xD/84Q9LLFV87nOfW+If/GChPrrxxhuX+Be/+EWJb7/99hJ7\n3FddddUSu/0vetGLSjxv3rw/257PfvazOemkhZKNx+vd7353iX/84x+X+JFHHinxWmutNebfStHf\n8pa3jPke05+tttqqxB7Du+66K+LRRx8t8SqrrFJiU8N//ueFzy/P33LLLZdjjz02RxxxRDbaaKPy\n+ty5c0t8//0Lie9KKy28ZTzWboMs0PvDc+bD+Xvf+16JzzzzzAzCE6Xu1ySZkSRN07wpyV1t2z70\nBD+roqLiKcYTutHbtp2X5OamaeZlRHE/+EndqoqKiicVT7iO3rbtERN9r5RqiSUWphHS4913373E\nUs4ll1y4iauvvnqJpevSoGuvvbbEJ5xwQolf/OIXl1iqpPq73HLLlfjhhx8usVRMCjyaBv7xj3/8\ns21dffXV85KXvKS8Lj1Ut/jd7xYWLKwcSE2lk1YUvvGNb5TYFOBHP/pRiaX9DzzwQInf8Y53lFia\n6T4vvfTSJf63f/u3Eq+77rolnjp1aomlnNJm0w0rETNmzCjx+eefX2JVd9X7b33rWyX2GL7zne8s\nsSnGBRdcUGKvp6RfUdlwww3H3G4rH+7nhRdemGSkGiK99xzvu+++JbZq8uCDD5b4oYcWkmGvZStO\npjRem//wD/+QiaA64yoqhgD1Rq+oGAI8Yeq+KFAllR6riksPff9ll11W4pVXXrnEquWaI6SfmiHe\n/OY3l/izn/1siTVGSJtUP1Xd3U5TiST56U9/WuKOaq2++uo9o4hGFNMYaeeVV15ZYg06ft/VV19d\nYmm5Zor11luvxFLF2267rcRWNb773e+WWEpv6mXq0plkkj6FNiXT6KLq/JrXvKbEJ598comlupqr\nTDek36ZPGpCkyVZZNL8kyV/+5V+W2GqH+2xVw/PfpSirrbZar3Lw8pe/vMReE1L0N77xjSW2euP5\ne+1rX1tiqynnnHNOiQ899NBMBPWJXlExBKg3ekXFEGBSqLte5v/8z/8sseYDqfIg2vSd73ynxK9/\n/etLrOIprZOWn3HGGSXW9y7t1w8uFZOW+l2qtKP//i/+4i/K/6u6S6dVti+//PIS62s25fB1VeXz\n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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9dd9db890>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "weights = model.get_weights()\n",
    "plt.imshow(weights[0][:,0].reshape(72,72), cmap='gray')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "id": "P8-mJfR4nepb",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "74790295-2f1f-4952-d462-b3bafad2640d",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123184058E12,
     "user_tz": -60.0,
     "elapsed": 797.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9dd84bc50>"
      ]
     },
     "execution_count": 76,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD7CAYAAABDsImYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xm4JWV1LvBXJpkciTGOwYlS44Ag\ng4oyiiigguAANAjdgDQNzWAUvXLxKk8wyiizzN2ADFEUW0BEEA2EQYhM0RIaITGo4IxDQAz3j9P1\n9a92zj596OiBZn/v8/i4qN67dtVXVafetda71nrCww8/nIqKisc3lnq0D6CiouIvj/qgV1SMAOqD\nXlExAqgPekXFCKA+6BUVI4D6oFdUjACWWdwvNk1zRJJ1kzycZHbbttf/2Y6qoqLiz4rFeqM3TbN+\nkpe0bfu6JNOTfPbPelQVFRV/VizuG33jJF9KkrZtv9c0zdOapnly27a/Ge/DH/7whx9Okn333Tdb\nbbVV2T5t2rRiP/GJTyz2H/7wh2LfdtttxV5hhRWK/ctf/rLYL3jBC4r9la98pdjve9/7in3rrbcW\n+/Wvf32x/+u//qvYp5xySrH322+/Yt9zzz3Fvvbaa4t9++23R2y++ebFvvnmm3Pcccdl5syZuffe\ne8v2D3zgA8W+++67i900TbF///vfF/uWW24Z91jvu+++Yv/VX/1VsZdbbrlir7baasX+3ve+V+xf\n//rXxV5qqYV/61/3utcV+9vf/naxf/jDHxZ7ww03zHjors3MmTOz5557lu2veMUrir3MMgtvt3/7\nt38r9vLLL1/s3/xm4S3005/+tNiuicfpuay++urFfvrTn17sq666qthvetObesf9r//6r8Vec801\ni/2nP/2p2IceemixvcZPfOITM3PmzBx33HH51re+Vbavv/76xX7uc59b7BtvvLHY3uM/+MEPxj2+\nJz3pScW+7rrrxj039/P5z3/+CRmCxfXR/ybJffz3fQu2Tfylv1nkRx5XWHXVVR/tQ5hyPPOZz3y0\nD2FKsaSc7xMWRwLbNM3nkny1bdsvL/jvf06yS9u2Pxjv8z/5yU8eHrWHvKLiUcDQN/riUvd70n+D\nPzvJj4d9+NRTT02SfPSjH83b3/72sn3dddct9te+9rViP/jgg8V+61vfWux//ud/Lva73vWucT8/\nZ86cYkvxpLTSRqnl0572tGLPmzev2G95y1uKLUV773vfG6F7cMUVV+Smm27Kq1/96p4L8fnPf77Y\nujGe22tf+9piv+QlLym29PUJT1h4TaV4//mf/znub73yla8s9tve9rZi/+xnPxv3GHQrnvKUpxT7\nzW9+87jH88c//jFJ8g//8A854IADyvaXvexlxZZC//Vf/3Wx//Zv/7bYd955Z7Hbth33t1yTZZdd\ntti6GB6zLs+rXvWqDIO/cdlllxX7pS99abF1FdZcc8187GMfy8EHH5xnP/vZZfvRRx9dbN3KLbfc\nstgnnnhisbfbbrtiD3OxXIstttii2LqPZ5999tBzW1zqfmmSbZKkaZo1ktzTtu39i7mvioqKvzAW\n60Fv2/bqJDc0TXN1xiLuey7iKxUVFY8iFjuP3rbtAYv+1BguuOCCJGPUXco9f/78YktHfvGLXxT7\nJz/5SbGlnFIro6XTp08v9s0331zslVdeudhSuWc84xnFvvTSS4st5ZRmbrTRRsXWBUiSa665pthb\nb711+X+jpEb8jVtIoY1Ou08prlHxtdZaq9hf/epXiy1tdC1+9atfjftd3ZsZM2YUWwr5/e9/v9hG\nps2auKZLL710se+/fyHpk4pKjaXc3gdejxe+8IXFlup6jTfYYINimzU566yzInTLdOO0jczrunRu\nxp133tlbF+9l1/2LX/xisXX7dDfNRLm+3iue/xe+8IVMBlUZV1ExAqgPekXFCGCxqfsjgbTLaHFH\n6ZM+LX/qU59a7P/+7/8uthFvKacUesUVVxz3dxVlGJlWkCPldD8ep1HezTbbLOKGG24odidEWWqp\npTJ37tyy/be//e24vyfNVmQhZZP6SZVf9KIXFdvzVFSzxhprFPs1r3lNsaXKz3rWs4pt2lXRjlFr\n6ff11y9UQOtuddH4pB/5X2WVVYot7XV9Pcd/+Zd/KbbRdam0LokiJYU3rnnSp/teJ92kN7zhDcW+\n6aabiv3jH48lmm688cast956456bNP6KK64otpkS79MTTjih2Ntss02xXfczzjij2Ntuu20mg/pG\nr6gYAdQHvaJiBDAl1F09tfRWWq5c1Ki4tNEIqVp3qa70zd8ygiukTVJdj0FaJiVU5JP03ZLnPe95\n5f/f/e53l+2e80orrVRsI/7nnHNOsZ///OcXe+211y72d77znWIbpX/Pe95TbLXVRr+l60aF1dtL\nLT1OXQP3uckmmxTbjIiipXXWWafYUn0FQmYfXv3qVxdbTbfHI5Ue5vLoShjhT/p0WpdRl87ztFah\nu2Yvf/nLh7qkauOH3de6krphCoyMwHsOX//614t90EEHZRjqG72iYgRQH/SKihHAlFB36Z5RTyPn\nl19+ebHvuOOOYlsWqXhEGi8lMnL8T//0T8V+8pOfXGwFNs95znOKLfXzt7roatKn3lLmwd/u6N7S\nSy+df//3fy/bLUmUskp9/YzRcsURRlvVh6t99liNLkuPFd4oLDFarDukRnvfffctti6N1FLX6Jhj\njim2FNj1lUq73Qi8oijPy3OX0vr5QcGMAiij/56DrqduSffbK6+8cr773e+W7d4X3hN/93d/V2zd\nREtTrZewhsNr6ZrqGk2E+kavqBgB1Ae9omIEMCXUXUqkuOU//uM/im3EU6pltNXPGOWU4px//vnF\ntsTVKL1UTPGBNNCIr1FXyxGNkCZ9l6M7vic84Qk9Tb+02cir26V16s8VulhSqRZdynnuuecW+/3v\nf3+xFR65jrox7l/duLT0d7/7XbF1N974xjcW2+i6241qm3FxfR966KFiS28Vz+i26Aq9/OUvL7a0\n13soSa6++upi69J5zexspOvZZTXatu3dg5Yff/nLXy625+n+7YzjtbFGQrdS98F7RZ38IOobvaJi\nBFAf9IqKEcCUUHcj3tJPI8qKO6TT6n3VOEu/r7zyymJLuaU4UjYjuNLDHXbYodhG3dVrX3zxxcW2\n5DbpCxyWXnrp7LDDDrn66qt7dFq9t9kIz2377bcvtm6PdO+uu+4qtrRWjb4NLhWNKCbRNZIq2ihT\ngYrCDaP0bteF+fnPf15shSGeo9dSN+Gwww4rthR4xx13LLb3kOduFsfGioPXzPoBj1uq/M1vfrPY\n3i+dGGbdddftuYa6W157awN0B88888xiew3U6Nv9R1dE92ki1Dd6RcUIoD7oFRUjgCmh7tIdmw5K\n2aTWUmijwnYoMSosfTOqb2cYKY5CHaOWihWka4o71M9LvZPkwx/+cLE7Lfqyyy7b6wji8dkNZrfd\ndit210wz6evDFXcYCTbqfuyxxxbbppRmI8wWKL6wOeZOO+1UbGmzzT29HtYSeL2NQCv40T2zRFmN\nvRTYXun27t90002LbY2AbZil9EcccUSEboxZF9fC47PGoBP0/PjHP+4dh/emmQz77Cvy0s3oaiSS\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9dd92de90>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(weights[0][:,1].reshape(72,72), cmap='gray')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "id": "Ffw0nfbxnepe",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "4eb87297-4f79-4b0f-f7b5-5251a26f63c9",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123185561E12,
     "user_tz": -60.0,
     "elapsed": 593.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9dd83fe90>"
      ]
     },
     "execution_count": 77,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD7CAYAAABDsImYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xvcb2OZP/BPmpkU1egwThWJlimT\nSSe0DZFD2rZxyPlMzmwVkRx2EXII7ciZIuNQQs6HsjtIpTEqkxWlGkOY+pHOYf/+ePa693s97e/j\nIT1s3/vzenm9Lt/9Pax1r7We+3Nd1+e6rufMnDkzFRUVz27M83QfQEVFxd8e9UGvqBgC1Ae9omII\nUB/0ioohQH3QKyqGAPVBr6gYAvzdk/1g0zTHJlk+ycwkU9u2/c5TdlQVFRVPKZ7Ujt40zcpJlmrb\ndoUk2yf55FN6VBUVFU8pnuyOvlqSi5OkbdsfNk2zQNM0L2rb9tdzevOqq646M0lOP/307LvvvuX1\nf/7nfy72csstV+xDDjmk2P/+7/9e7KWXXrrY3/jGN4r9wx/+sNj33Xdfseebb75i/+M//mOx//7v\n/77Yr371q4u9xhprFPsPf/hDse+///5i//GPfyz2//t//y/iT3/6U7Efe+yxTJ06Nccff3wefPDB\n8vp3v/vdYk+bNq3YCpcOO+ywYr/hDW8o9rLLLlvs6667rti//vXsZXdNf/KTnxT73nvvneN7ll9+\n+WL/8pe/LPZznvOcYj/yyCPFvuqqq4r9whe+sNj/93//lyS58MILc84555TXf/Ob3xR7nnlm7yuP\nPfZYsf/3f//3L75n9DHssssuxX744YeLPX369Dl+p+f4u9/9rtjrrbdexBe/+MViP+95z5vj51/y\nkpcU22v5kpe8JBtvvHHOP//8fOc7swntAgssUGzvqf/8z/8s9qWXXlrsTTbZpNif+9znir3++usX\n++Uvf3mxf/WrXxX7da97XbEnT548e8FG4cn66AsleYD/f2DWa2PCh2oYsOCCCz7dhzDhWHLJJZ/u\nQ5hQvPSlL326D2FceM6TkcA2TXNKksvbtr1k1v9/Pcl2bdv+aE7vv+uuu2YO20NeUfE0YOCO/mSp\n+z3p7+CLJLl3wHsLlTvwwAOz9957l9f/6Z/+qdjf//73i/3b3/622NK6xRdfvNhSfem0NEs6JeV6\n5StfWWxdgL/7u9nLsdRSSxV7tdVWK/ZZZ51VbGlpkvzbv/1bsR977LFMnz49e+yxR17wgheU16Wd\nb3nLW4qta3HhhRcW2x3j97//fbF//OMfZ05Ye+21i33bbbcV+8477yz2q171qmK/6EUvKva3vvWt\nYrsWb3vb24q92GKLFfv1r399sW+88cYkyaGHHppTTjmlvP7lL3+52G984xuL7fXQJfOe0IXZfffd\ni33rrbcW2+vntff6+fr8888fcf755xf7Na95TbFf9rKXFdtz/upXv1rs9dZbL5tttlnOPffc3j2r\nW+X11gVcaaWViq2b+OY3v7nYrqNuqEzx3e9+d7G32GKLDMKTpe7XJNkwSZqmWS7JPW3bPjz2Ryoq\nKp4uPKkHvW3bG5N8t2maGzMScd/tKT2qioqKpxRPOo/etu1+432vFFpburPlllsWe4kllij2kUce\nWWyjjUZ/V1111WK/4hWvKLZUXzp11113FVtavfXWWxd73nnnLfaLX/ziYr/97W8v9tVXXx3xjne8\no9gdpZx33nl70WNp13/9138VexCtfec731nsBx54YI7vMfLq90sVpbuPPvposc1ASBs9Zt0kf9ds\nR3c9Dj300N76SqG9flJoI+cbbrhhsV33b37zm8U2m6Ar+NnPfrbYuiQ/+MEPiq0LkyTLLLNMsaXT\nUmWptet13nnnZbPNNst5552XbbbZprzuff0P//APxda1e+tb31psMzFf+MIXij158uRim+HRhbvi\niiuK/beg7hUVFXMR6oNeUTEEeNLU/YlA6rP55psXe5FFFin2j340OzOncEOqpPigbdtiv+lNbyq2\ntO6GG24otsKb22+/vdhG7C+++OJiK2L4/Oc/X2xpr1HzJDn++OOLvfrqqycZEU9IoY0Sf/jDHy62\nEfyNN9642KeeemqxFc8YOXctFFYYLVaE5PHcdNNNxZa6K/65+eabi63r5fHrPilQMZuy3XbbFXvQ\nOni+O+64Y7G9rlL6Y489tthSY+mz11sXcfT3mnUw0/D85z+/2Apuuntno4026rkrnufJJ59cbF2s\nY445pti6Z4p+dA3333//YuuG6XqMhbqjV1QMAeqDXlExBJgQ6i6NUgcs1VWgIG3+13/912IrrLjn\nnnuKrYb6oosuKrYUyuikdP1DH/pQsaWoihVUD6rV/973vhex4oorFnv69OnZf//984UvfKEXYV13\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9dd86f590>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(weights[0][:,2].reshape(72,72), cmap='gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "efwSWINAneph",
    "colab_type": "text"
   },
   "source": [
    "#4 A More Diffcult Classi\fcation Problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "w9yhnjk-neph",
    "colab_type": "text"
   },
   "source": [
    "Generate a training set with 300 randomly positioned samples and 20 as noise amplitude "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "id": "MiTBzUfJnepi",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 28.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 544.0
    },
    "collapsed": true,
    "outputId": "7329f3c7-9665-494b-f534-843a1076d921",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123203101E12,
     "user_tz": -60.0,
     "elapsed": 11923.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating data:\n",
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n",
      "100\n",
      "110\n",
      "120\n",
      "130\n",
      "140\n",
      "150\n",
      "160\n",
      "170\n",
      "180\n",
      "190\n",
      "200\n",
      "210\n",
      "220\n",
      "230\n",
      "240\n",
      "250\n",
      "260\n",
      "270\n",
      "280\n",
      "290\n"
     ]
    }
   ],
   "source": [
    "[X_train_4, Y_train_4] = generate_dataset_classification(300, 20, True)\n",
    "Y_train_4 = np_utils.to_categorical(Y_train_4,3)\n",
    "X_train_4 = X_train_4.reshape(-1,1,72,72)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "id": "Ki230rUGnepn",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 34.0
    },
    "outputId": "0392d153-6fa5-4e62-d708-b3ae10c8ef92",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123207689E12,
     "user_tz": -60.0,
     "elapsed": 584.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(300, 1, 72, 72)\n"
     ]
    }
   ],
   "source": [
    "print (X_train_4.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "o-24G9t6nepp",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "from keras.layers import Convolution2D, MaxPooling2D,Flatten,Activation\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model: 1 convolution layer and 1 densely-connected layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "id": "fWPBtNWonepw",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 3.0
      },
      {
       "item_id": 4.0
      },
      {
       "item_id": 14.0
      },
      {
       "item_id": 25.0
      },
      {
       "item_id": 26.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 1788.0
    },
    "collapsed": true,
    "outputId": "08208c6c-a568-486a-e6d2-f6fd8586e38a",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123222911E12,
     "user_tz": -60.0,
     "elapsed": 6638.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "300/300 [==============================] - 0s 992us/step - loss: 1.1404 - acc: 0.3467\n",
      "Epoch 2/50\n",
      "300/300 [==============================] - 0s 421us/step - loss: 0.9444 - acc: 0.5633\n",
      "Epoch 3/50\n",
      " 32/300 [==>...........................] - ETA: 0s - loss: 0.8901 - acc: 0.6562"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python2.7/dist-packages/keras/callbacks.py:497: RuntimeWarning: Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: acc,loss\n",
      "  (self.monitor, ','.join(list(logs.keys()))), RuntimeWarning\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300/300 [==============================] - 0s 379us/step - loss: 0.8200 - acc: 0.6367\n",
      "Epoch 4/50\n",
      "300/300 [==============================] - 0s 352us/step - loss: 0.7175 - acc: 0.6667\n",
      "Epoch 5/50\n",
      "300/300 [==============================] - 0s 348us/step - loss: 0.6638 - acc: 0.7567\n",
      "Epoch 6/50\n",
      "300/300 [==============================] - 0s 353us/step - loss: 0.5550 - acc: 0.7933\n",
      "Epoch 7/50\n",
      "300/300 [==============================] - 0s 330us/step - loss: 0.4990 - acc: 0.8667\n",
      "Epoch 8/50\n",
      "300/300 [==============================] - 0s 325us/step - loss: 0.4560 - acc: 0.8567\n",
      "Epoch 9/50\n",
      "300/300 [==============================] - 0s 319us/step - loss: 0.4368 - acc: 0.8167\n",
      "Epoch 10/50\n",
      "300/300 [==============================] - 0s 345us/step - loss: 0.4165 - acc: 0.8500\n",
      "Epoch 11/50\n",
      "300/300 [==============================] - 0s 347us/step - loss: 0.3678 - acc: 0.9067\n",
      "Epoch 12/50\n",
      "300/300 [==============================] - 0s 327us/step - loss: 0.3320 - acc: 0.9067\n",
      "Epoch 13/50\n",
      "300/300 [==============================] - 0s 313us/step - loss: 0.2792 - acc: 0.9167\n",
      "Epoch 14/50\n",
      "300/300 [==============================] - 0s 324us/step - loss: 0.2322 - acc: 0.9533\n",
      "Epoch 15/50\n",
      "300/300 [==============================] - 0s 349us/step - loss: 0.2192 - acc: 0.9433\n",
      "Epoch 16/50\n",
      "300/300 [==============================] - 0s 366us/step - loss: 0.1864 - acc: 0.9733\n",
      "Epoch 17/50\n",
      "300/300 [==============================] - 0s 340us/step - loss: 0.1758 - acc: 0.9733\n",
      "Epoch 18/50\n",
      "300/300 [==============================] - 0s 336us/step - loss: 0.1500 - acc: 0.9867\n",
      "Epoch 19/50\n",
      "300/300 [==============================] - 0s 351us/step - loss: 0.1543 - acc: 0.9800\n",
      "Epoch 20/50\n",
      "300/300 [==============================] - 0s 374us/step - loss: 0.1236 - acc: 0.9833\n",
      "Epoch 21/50\n",
      "300/300 [==============================] - 0s 358us/step - loss: 0.1038 - acc: 0.9933\n",
      "Epoch 22/50\n",
      "300/300 [==============================] - 0s 351us/step - loss: 0.0933 - acc: 0.9967\n",
      "Epoch 23/50\n",
      "300/300 [==============================] - 0s 352us/step - loss: 0.0833 - acc: 1.0000\n",
      "Epoch 24/50\n",
      "300/300 [==============================] - 0s 340us/step - loss: 0.0748 - acc: 0.9967\n",
      "Epoch 25/50\n",
      "300/300 [==============================] - 0s 331us/step - loss: 0.0903 - acc: 0.9833\n",
      "Epoch 26/50\n",
      "300/300 [==============================] - 0s 358us/step - loss: 0.0685 - acc: 1.0000\n",
      "Epoch 27/50\n",
      "300/300 [==============================] - 0s 346us/step - loss: 0.0549 - acc: 1.0000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 28/50\n",
      "300/300 [==============================] - 0s 356us/step - loss: 0.0489 - acc: 1.0000\n",
      "Epoch 29/50\n",
      "300/300 [==============================] - 0s 342us/step - loss: 0.0434 - acc: 1.0000\n",
      "Epoch 30/50\n",
      "300/300 [==============================] - 0s 347us/step - loss: 0.0394 - acc: 1.0000\n",
      "Epoch 31/50\n",
      "300/300 [==============================] - 0s 349us/step - loss: 0.0374 - acc: 1.0000\n",
      "Epoch 32/50\n",
      "300/300 [==============================] - 0s 343us/step - loss: 0.0329 - acc: 1.0000\n",
      "Epoch 33/50\n",
      "300/300 [==============================] - 0s 340us/step - loss: 0.0311 - acc: 1.0000\n",
      "Epoch 34/50\n",
      "300/300 [==============================] - 0s 341us/step - loss: 0.0313 - acc: 1.0000\n",
      "Epoch 35/50\n",
      "300/300 [==============================] - 0s 333us/step - loss: 0.0251 - acc: 1.0000\n",
      "Epoch 36/50\n",
      "300/300 [==============================] - 0s 374us/step - loss: 0.0249 - acc: 1.0000\n",
      "Epoch 37/50\n",
      "300/300 [==============================] - 0s 337us/step - loss: 0.0217 - acc: 1.0000\n",
      "Epoch 38/50\n",
      "300/300 [==============================] - 0s 352us/step - loss: 0.0203 - acc: 1.0000\n",
      "Epoch 39/50\n",
      "300/300 [==============================] - 0s 334us/step - loss: 0.0195 - acc: 1.0000\n",
      "Epoch 40/50\n",
      "300/300 [==============================] - 0s 334us/step - loss: 0.0182 - acc: 1.0000\n",
      "Epoch 41/50\n",
      "300/300 [==============================] - 0s 365us/step - loss: 0.0183 - acc: 1.0000\n",
      "Epoch 42/50\n",
      "300/300 [==============================] - 0s 345us/step - loss: 0.0162 - acc: 1.0000\n",
      "Epoch 43/50\n",
      "300/300 [==============================] - 0s 348us/step - loss: 0.0146 - acc: 1.0000\n",
      "Epoch 44/50\n",
      "300/300 [==============================] - 0s 345us/step - loss: 0.0149 - acc: 1.0000\n",
      "Epoch 45/50\n",
      "300/300 [==============================] - 0s 362us/step - loss: 0.0125 - acc: 1.0000\n",
      "Epoch 46/50\n",
      "300/300 [==============================] - 0s 342us/step - loss: 0.0122 - acc: 1.0000\n",
      "Epoch 47/50\n",
      "300/300 [==============================] - 0s 343us/step - loss: 0.0117 - acc: 1.0000\n",
      "Epoch 48/50\n",
      "300/300 [==============================] - 0s 361us/step - loss: 0.0115 - acc: 1.0000\n",
      "Epoch 49/50\n",
      "300/300 [==============================] - 0s 344us/step - loss: 0.0102 - acc: 1.0000\n",
      "Epoch 50/50\n",
      "300/300 [==============================] - 0s 357us/step - loss: 0.0096 - acc: 1.0000\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7ff9dd4b5a90>"
      ]
     },
     "execution_count": 81,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_4 = Sequential()\n",
    "\n",
    "model_4.add(Convolution2D( filters= 16, kernel_size=5,\n",
    "                           padding= 'SAME',activation = 'relu', \n",
    "                           input_shape=(1,72,72),data_format=\"channels_first\") )\n",
    "model_4.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model_4.add(Flatten())\n",
    "model_4.add(Dense(30,activation = 'relu'))\n",
    "model_4.add(Dense(3, activation='softmax'))\n",
    "model_4.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'])\n",
    "model_4.fit(X_train_4, Y_train_4, epochs=50,\n",
    "            batch_size=32,callbacks = [early_stopping_monitor])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate test set and evaluate the model. Loss: 1.17, accuracy: 66.7%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "id": "yljKNdiuneqP",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 31.0
      },
      {
       "item_id": 32.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 578.0
    },
    "collapsed": false,
    "outputId": "a0d37b7f-7244-4557-f35f-b22fc084a17c",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123238881E12,
     "user_tz": -60.0,
     "elapsed": 11783.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating data:\n",
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n",
      "100\n",
      "110\n",
      "120\n",
      "130\n",
      "140\n",
      "150\n",
      "160\n",
      "170\n",
      "180\n",
      "190\n",
      "200\n",
      "210\n",
      "220\n",
      "230\n",
      "240\n",
      "250\n",
      "260\n",
      "270\n",
      "280\n",
      "290\n",
      "300/300 [==============================] - 0s 389us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.1736325740814209, 0.6666666666666666]"
      ]
     },
     "execution_count": 82,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[X_test_4, Y_test_4] = generate_test_set_classification()\n",
    "X_test_4 = X_test_4.reshape(-1,1,72,72)\n",
    "model_4.evaluate(X_test_4, Y_test_4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "oZLmhOMjneqT",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    ""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "DuU5JoNIneqg",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RzolePJaneqi",
    "colab_type": "text"
   },
   "source": [
    "# 5 A Regression Problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "id": "8Pitjjypneqi",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 23.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 544.0
    },
    "collapsed": true,
    "outputId": "8d417c45-46dd-4d28-f985-171f1726bd44",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123281422E12,
     "user_tz": -60.0,
     "elapsed": 11025.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating data:\n",
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n",
      "100\n",
      "110\n",
      "120\n",
      "130\n",
      "140\n",
      "150\n",
      "160\n",
      "170\n",
      "180\n",
      "190\n",
      "200\n",
      "210\n",
      "220\n",
      "230\n",
      "240\n",
      "250\n",
      "260\n",
      "270\n",
      "280\n",
      "290\n"
     ]
    }
   ],
   "source": [
    "[X_train_5, Y_train_5] = generate_dataset_regression(300, 20)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "xQDrJyfWneqk",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "from keras.layers import BatchNormalization\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "id": "Cy6lcPyDneql",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 324.0
    },
    "outputId": "19a3d151-63d7-4dcd-d416-48ab2bfa6abc",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123295982E12,
     "user_tz": -60.0,
     "elapsed": 970.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAToAAAEzCAYAAAChTc+UAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJztnXuMZNdd57/n1qO7uqsf1fPs6XnG\nds7aBEEeAg95OJAQUHhsIrKKVoIlUdACMSIPkcR5CSJQwi5rGUJAJH+woEWwEFACiABms1HWyBAS\nAxEk4STBnvGMx/ZMT8/09Linu6vqnv2j6vbcuvdbVb/uelf9PpKVyelb955X/erc7+/8fsd476Eo\nijLOBIOugKIoSq9RQ6coytijhk5RlLFHDZ2iKGOPGjpFUcYeNXSKoow9WclF1toXAPhTAA855z6W\n+NurAXwYQBXAZ5xzv9j1WiqKonRA2xWdtXYWwK8D+GyTSz4K4EcAvBTAa6y193SveoqiKJ0jeXXd\nBvBaAJeSf7DWPg/AmnPugnMuBPAZAK/qbhUVRVE6o62hc85VnHO3mvz5KIArsf9/GcByNyqmKIrS\nLUQa3R4w7S7w3ntj2l6mKIrC2Jfx6NTQXUJtVRexAvKKG8cYgyi+dnt7O/X3SqWSKpudnU2V7ezs\npMpu3UovPNlny+VyqiybTXcFM8iZTCZVFrWjUCjg1q1bmJ6eTl2ztbWVKmNtYLHHU1NTqTJGoVBI\nld28eTNVxurH+i5qf7FYxM2bN2kfsXvduHEjVTY/Py+qGxsv1nesrWEY7ukZmUwG1WqVzjkGmzf5\nfD5Vxu7H+onNL1bG7re5udnyuqWlJdp2hvQ7EgTpF0A21nNzc6myarWaKpPOw3i72L0ldLS9xDl3\nDsC8tfa0tTYL4AcBPNzJPRVFUbpN2xWdtfbFAB4EcBpA2Vr7BgB/BuAJ59ynAPw0gD+oX/6Hzrmv\nt7tnZLXZiob9KrNfA7ayYr9MbNXI7sd+NdkvGCuL1yUIAvpLyn4hFxYWRPdnnwUArK7CnD8PXyoB\nS0uYKZXgEysCtgo7f/58qoytkOKri2w2S1cbbLyKxWKqjPUvK3vuuedSZWyVy/qYzQk21tGcmJmZ\nwfb2NmZmZlLXsLnJYKvNXC4nqgdrA/usdO4kV3lsxcT6l40ru46tytkzWLvYW8m1a9dSZaxd3ciw\n1NbQOeceA/DKFn//fwDOdlwTZe/kcgg+85nd//ueahXXAVwzBmsArhuDG2GIa8bgOoBQtVFlQum2\nM0LpJwsL8KUSTP2XMeM9DgA4EPsFDOr/Do3BDdSMYO7hh+FLJYSLi/ClEvzi4gAqryj9Qw3diONP\nn941dK0IvMcigEXvkf2nf2q8hzHILC0BpdLua3D0vyiVAPJ6oiijhBq6UefMGSBhuPaK8R5mfR1Y\nX4c5d+52efSqWyohMzfXYAB9qVQzgkRTUpRhYyCGLhJcmQC+sbGRKpMK9Ey0ZEIrE5+Z04I9gwmy\nkXNlamoK5XKZiuxsGwJzpUsdL7ttuOMOmHr/SNv/K7/yK6ky5rSI7vf+978f//2BB1J/B4BbxmDN\nGFxD7bU4/t+tWgUAcMcDE/LZdgXmZGJOEDaGbDtCvN+r1WrbrRoRbL6yOcLGtVQqpcqY8L6+vp4q\nY+PP6py8jo0peybrc+YUYUj7nM1N9p1gTiDp9qpW6Ipu1CkW4Q8fhrl8uaH4m8Zg0xgcCgKUvEex\nR2eDFLzHivdYiZVFxnULt43fahhiDbcdJWmfnqL0DjV048Dp00DC0G0Yg78IAkzVf5nz3mPRe5S8\nx2y1ipL3WAKwBGCuR0ZwGsCy91j2PrUC2wGA3/qtmg4Y/y+bBebmdleCitIN1NCNA2fOAP/wDw1F\npxPGa8cYXDYGl1F73Ywbkqz3OJrLoVQ3hNF/iwAWemQE8wDwzDO1/2JMbW/DZ7PwcY/wsWO3DeHC\nAkCkDEVphRq6ceD06dRG4ZL3mPceaQUlTcUYXKn/FycMQ2S8xwd+5mfwh7/8yygBWIpWhvVn9MLk\nmEoFZnUVWF2t/f+4XpTJAIuLMIuLu8Zv10NcKNT+rigJzADOdfXRzmkm+LL6sDImDLNd2kzcZYIs\nE7eZCMzqEu0ij2JCmZDLhHepU4Q5KJL1zf/u76KwttZ4zQ//MA6++tVN6xunVXzi+vo6FhYWUnUz\n3uNANtuwClwCcLCuC8Z7TzrWrM+ZM4rGCRuDdaBBC9x1jgCo1g151Hc7OzvI5/O4cuVK6l5MKGdI\n68aiRaSOB2ksbtxRlslksJaYD81g3yVWxhwg7HvDnAfsOgZz5MS/19PT0wMJ6leGhPDUKSAxseNb\nRXqBNwbX6/89ESvP5/Mw3qMIoBSGu86QXYMIINeDH1gT7RUEgPr9I8eIB3ADtWiRq95jDQC++lUc\n8R7Y2QGEhk0ZTdTQjQnhqVPp/XRPPFH7wg9A2PfGYAPARiaDJwFsx1eldSO4EHOKRAbwsDHI98II\nAlhATXM8Gd3/j/4I/zUMMfXgg/DF4m1dsFSCOXz49iuxbpgeedTQjQnhygp8JgMTMyhmYwMl73Ft\n2DyYxuAmgHVj8GSiblP5PApAw+vwAWNqzhHvMdMjqcXcvAlz8yZw8SKAxCvkzMyuAYw0wV0jODur\nHuIRQA3duJDPAysrwJNPNhSfCkNcGyUvZX2j8S1jdhMbxo3OdN3gTVUqu9tjolXhbK/05s1NmM1N\nmKeeSle3ULhtAOsOElMs1sqKRTWCQ8JADF00cdmOdyZGMnFXmh6H7Q5nYjwTfFkUBPtsXLidnp5u\nnlYpAXMyMNGatZWJuzsrK8g8/nhD2bHtbfx9om3SdEbxKJWNjQ2xyCxNPyRNIxR/xjqAZ5s8tzQ7\nu/sKvBTtGdzeRgnAfMwIxtuRy+Xwq7/6qy2fGSF1CkSUUXOMrAFYreuC0X83wEX7Vmml4jDHQNK5\nwxxMrA1SBxiDOW1YdBO7jo0/ndex7z/7jARd0Y0R4alTyDzySEPZae8HptP1m3Jsr2DEZv1LkkXN\nSbEE4ER9zyDuuAPXgwALYbi//NxtyAE4Uv8v+fWtANioVnENwJoxuADAjdLKe8RQQzdG+JUV+FwO\nJrainAFwGMDlpp+aDCrGYBXAKoBnolX+j/0YPv6zPwsThlhIbJaex+09g70wP1kAh7zHIQDwHlPG\nwPXgOUoNNXTjRCYDf/w4zBNPNBSf8R6XJ2BFt1/C2F67iEq9v4z3WAB2Q+fiHuIldO8LlNysrXQX\nNXRjRnjqFIKEoTvtPb4woPqMOr6enfm6MdiKjFH0v95j3piUUyT6373szFND11sGYugicZEJ1EwY\nZdcxR4b0BDHm8JBGZEiOamRCLhOepac7SYXxbDYLf/p0Q1kQBDhjDPLZ7G6YmLTfEzvSxedqsIgP\nlgqIOW2kJ2OxcWWOJ+Z4iY8/mwuA3Dm1sbGBDQDnaxUFUHdOeY9ZIBU/vOQ9jtbnVfwZz3oP36Rd\nLIKCOa2SsDFlfcTmF4uMkEToANwJwq6TnirH5tNe0RXdmOGPHoWfmoKJTfJ8PYPIJV019A9j8ByA\n54zBxVjxUhjiJxMG/lb9WqV3qJtn3AgC+JMnU8XJbCbKYDhExuEyMBFe8UGihm4MCROvr0Bt47Ay\neJihU32u96ihG0OSOh0AHPceGV3VDZzDzVZ0Sk8ZiEYXifxsxz8TQZloyURkJrIzh4J0hz8TwZm4\nHQntS0tLuHHjBq0H+xyrBxPo2wnqEbu7z48dQzA3B7O5uessyAM4GQS4kMnQnetMaI6LyrlcTpxq\nhzkeWp21QdsQo120RATrO3Zd/BnZbJbOESaKM0cRE95bOQ8OkXrcnJpCsT7GFy5cENWFjWF8PrHv\nDMC/D52cI8HGi0XGSNNUsWfE000tLS2l/i5BV3TjiDHwZ86kivX1dbBk657XJFc1IqLnaA+PK6rT\nDR0HvIdJGLobQYBt1eh6jhq6MYXpdMe870nCS0UGc0SsqpHrC2roxpVSCT6hiwXe47iu6gYGNXT6\n2toXBuKMiHZ/s53bUuGdOS2Yc4PtNGdIxWcm2scF1FwuJ448YKItE4aZgNzWMWAM/OnT+Lmf+7mG\n4neePYvZ170udXm79FBbW1s0CoK1lV3HHArSMyOY4N8ukiOiXYqrZv3IHFHSlF/NogqWqtWGNodh\niGfCsCFCgvUdQ3JINBsb5rCRPpM5HlifsOey782eD2vvAP05GWeIQ6LX50gozdE9dINDDd0Yw3Q6\nPPMMplWn6ztT3qfOyPXG4Koaur6ghm6cmZ+HT+w7Mt7j9GBqM9EcJD8u14zZTQel9BY1dGMOW9Vp\n3Gv/UY/rYBlo9hKpeMzE3U4iI9iO7MXFxab1jMOE0biYnM1maYofFgXBzsJgMMGbCci0T06cQPZL\nX2oouyubxecSfcV22seF5jAMaduZaN+J40EajcLqy/qEzZ34M7LZLHUKsfGSOpkYByoVhIk+eOLW\nLdxIjBn7TrCDqFlbk44s6VkQ7Dqps49FvEjTlEk/2w10RTfmhCSTyUHve3dilkI5TMo0xrV/qKEb\nd2ZnER45kirW19c+4n3z9ExKX1BDNwH4U6dSZRoO1j9mUTukKE4VtWMPlf6ghm4CCImh0xVd/2i2\nf05HoH8MxBkRibrSdC7Xr19PlTVLQ5OEiZtMVGc7xllZq7z5hUIBW1tb9P5MoGdtZdcxgZ45PJo+\nd3kZgfdAvZ6VSgVFANOVCq7X780iSOKCd6FQEEeosLGRHurNxpo5I9gz2M79dlEl3nsaZSDdyc/u\nnxybpTBMjeHVIKD1ZY4yNq4soiNeF2MMFfuZQ4E5xVjdmAOEOYVYn7Dxl6Yzi0coMaeGBF3RTQJT\nUwiPHk0Vn+5/TSYS1ecGjxq6CYG+vva/GhMJ87hq6Fd/UUM3ITBDd8Z7QLW63tLE46qGrr+ooZsQ\nwpUVIKF/zAE4MJjqTAwLSB9kvQ0grcQpvWQgzohIwGRiPMtVz65jwigTi1mqJSZ4MmGUidRMuI0L\nw7lcjgqvTOxnzhgGE/z3fPh3Lgdz8iSCJ59saP/zMxk8FgS0T5KisvSsDSaes7FhYyg9l0F6+Dcb\ni7gjo5nziN2LpdBikQzxZ66EITJobOuzQYDpJqI6czyxsWZOgLijYWlpiTqPpBE6bFzZHJZGwUjT\naknbv1d0RTdBsGMQT+t+up5yiPSvvrb2HzV0EwTdOKw6XU/RrMLDgejV1Vr7EIB7AXgAb3POfTH2\nt/sB/Chqm72/5Jx7ey8qqnSOP3YMPvEaUABwFMDVgdRo/FFHxHDQ9qfFWnsfgLucc2cBvAXAR2N/\nmwfwLgAvd869DMA91tp7e1VZpUMyGfgTJ1LFGg7WGwLvcUBXdEOBZEX3KgCfBgDn3NestSVr7bxz\n7gaAnfp/RWvtTdRC+tqG8EXiIhNLmRgpdTIw0V66q57VhYngTNyOO0tYHQB5+iHpM5mAzK5LHfh7\n992pcyTecccdOPrOd7Z8xs7ODhWPmWjNhGfWfiaoM1i72GdZ3zGHR7zOxhh6DStjURtM3I/66UAY\nIpe4z6Yx2Kz3BXNGSQV/5qBLjoW0z1kUBIugYN9D9gzWJ+x7IU1T1uw7tRckhu4ogMdi//9KveyG\nc27LWvshAI8DuAXgfzvnvt7uhuwLs1ekoSBSj420TszzFocZr2awEB0Gm4isTMSZM+m+u3wZN65d\nS20/icMm/jgg/bLti698BfjkJxvLzpzBh378x/d0G+k8ScLmtHSed8O4tGO/4Vz7YT/bS3ZNeP3V\n9X0Ang/gBoD/a639Nufcl1vdIPrSsNUA+9VgX2ppskB2HVvRsS8yWyG0is/NZDJNEweyXz52r05W\ndKwstaI7ehRbxsDE27u9jW9fWMBTidVHdL+trS1MT0+LV3Rs6wdrP1uVM1ifSFd0rbZO7OzsIJ/P\ni1dR0oSSUT+9rFzGSxN98Vg2i//zjncA4OPP3ixYXdrFv+bzeTqn2fdBuqJj3xs2rtIEqNIfmW4Y\nRIlYcAm1FVzEMQBP1/99N4DHnXOrzrkdAI8AeHHHtVJ6RxDQZJyq03UfdUQMD5IV3cMAPgTg49ba\nFwG45JyLfk7PAbjbWltwzt0C8BIAn2l3w+h1km0sZL8k0g24Uj2OIU07zbSRqH6ZTAblclmcWYSt\nQNiGabaSapdtJIL9ak7ffXfq2MMTlQqStY73yfb2tvi1h7Wf/aKz9PXSzBelUilVxvqOrTjiY1Eo\nFMTakzSLSKTlzXqP5Gx+fHsb6/V7s9UbG8N2m5IjkjKN9MxVSQYWgM85dp00ywtbqbJx7QZtrYBz\n7lFr7WPW2kcBhADut9a+CcC6c+5T1tpfAfA5a20FwKPOuUd6UlOle5DzXo97j6z3eipVl8h6jyVS\nrllLBoNoueOceyBR9OXY3z4O4OPdrJTSYw4ehC8WYWIaURbAivc4r4auKxxCTMyuc90Y7Gj/DgTd\n0DOJGAPoMYg9haZm6nstlAg1dJMKeX1VQ9c99NSv4WKg57oy8ViawpkJnkzcZQ4KVibNpMAE1LhI\nm8vlqODLnCzSurF2STflMmdEsVgETp2qpVevU65UcAhAtVxG9Im4mJ3NZsXp0JkIzsRoqeNBuoeP\nOTzYeMUdCMyZ0KwebG6yeZjL5bBcrTb0bzUM8Yz3DWe7SvdCsjqysU6WSbdqSe4FyLfcsO8rG8PU\n1qcm94vXhd1bgq7oJpVSCT6x+TkAkA77V/aDruiGCzV0kwx5fU2XKHtl2nvMJVarIYDVwVRHgRq6\nicYTh4Qaus45RMrWUEvvowwGNXSTDFnRHUUtdZOyf/TUr+HDMEG4x/goxk8qskrP8GQCMhMvmbgv\n7Qe2OzyKu1xaWsLa2hqtGxPKWX1Z+6VOAOZQaXfGavCbvwmsrjY8N3zDG4B77sHBgwcB1Hb6Ly4u\nUqGYicysrdKd8dKzSNn92HNZnaP5572HMYbuxmdxuFKR/XX5PF6SmNt/Uy7j84mxZc44Nr/YWa+s\n/XFH1vz8PHVYsbnPnimdc+w7LEnLD8gdavE5XCwW97URUVd0Ew57fU2Ghyl747Cu6IYONXQTjiev\nr3jiif5XZFxocrzhswOoinIbNXSTzqlTtUiJGObqVYC8VintKSKtcVYAXBtAXZTbqKGbdGZmgKNH\n0+X6+rov2P65VWPgNcZ1oAwkMiJKpMeE0XbncEYwIZel0WFpZKQpt5lYysriO7yXlpZoG5goztol\nTZvNxHLWn5IkmNmjR5G7cKGxvs41iODr6+s0u7I0CoI5aFjdpKmm2BhKd+nHPzs3NydOac5SqSej\nYJbDMNWuS8bQ9rP5yurCnEys75IJKqWJMqVnrrL+ZdexfmJOJvZZNtb9SrypjDkhOQYx0BXdvqDB\n/LqaGzhq6BSEx4/DJ1Y+5sYNpNNiKu1gm4XV4zp41NApwNQU/PJyqlijJPaI97q1ZEhRQ6cA4K+v\nauj2xiKAZN6abWOg/uvBMxBnRBRJIBXZmQgq3QXPdmlLT9Viz2Bi7tpa7SjbKDKCiawsdRM7yYpd\nt18nA8AFXybQ+zvvRPD3f99Q9i2FAj5XF4JLpZL4BCnWl9KIFyZkS6NgpJE28c9ubm6K51K7+XAs\nDBFUKg1z7koQoDg1JT47VnJeK8DHP3kd+y4xpwBzgEmP7WSfZXOY1ZfNJ+bIireLOXAk6IpOAQD4\n48eBhOGZ9R4HNRmnGPbaurrP/GlKd9FRUGpkszVjl0CPQZRDg/nV4zoUqKFTdmFxr2ro5Og5rsOL\nGjplF2boToQhoMauLYH3OEDKr+qr61AwEGdEJJBLHQBMVJUc4AtwUZUJqGzXP3MWMAE9LioHQUDF\nYya8Sg8rlp6tId25zupXLpeBY8eAqSmY+rh47zHlPfDMM/DeU6cI63PpTnbpgeOsn9j4s7nDPht3\nIOTzeRqNwERvNoZRW5e83z0jIhqH54zB9Xo9mcjO+pOVsbqwdiXnhDTyRnqQPHsmm0vSc1/ajU0E\nG9e9oj83ym0yGfiTJ9Plms2kLfraOtyooVMaYK+vaujao4ZuuFFDpzRADd358w1H9ylp1NANN2ro\nlEaOHIFP6nrlMo6poWuJxrgONwNxRkQCJnNGMPFcKsYyIZcJ4+yzTPBnQjsTeJN/Z0I5qwdrF3OA\nMDGW3Y+J6ux+bPd9fCyyx48j4xze/e5375b986c+hfz3fm/qc1LnCes3aQot1i42hux+bCziKZjy\n+bz4IG02XtlsFrn6xmpTv090v2vZLDL1Vd3qavqww70ciJ2Eifbxfl9YWKDOHnZ/NpfYdcwpyD7L\n5iuLeJF+Nj7+bO5K0BWdkoLFveo5Es05EDNyEevGYEdfXYcGNXRKCqrTXbiArL6+Ug6RLRYaETFc\nqKFTUvilJfjkK0K1ihODqc7Qo46I4UcNnZLGGE3btAfU0A0/A3FGRCLp4mI6h61U8JRGAUgPTmYi\nJxO3mQMlXpdyuUxT4UijG5gYy5wsbOe6NNKACdmp/jxxAtWvfQ1ATfivVqu4K5PB3ybux/qItUF6\nZgSrG+tPmmpK+GodF7dv3rxJz4eQphXKZDI4mHh1LZfLeLJSwWasLWwcmJOFPZeNv7SPk7B5Lj2E\nnLWfOWikjgdW32vX0uelSce1FbqiUyhsRbcM1ELClF2mvUcx0SchgKuDqY7SBDV0CsUvLMCXSg1l\nxnucVEPXAHttvQqgqq+uQ4UaOqUpnqzqTquhayD52gqox3UYUUOnNIVtM1FD1wh1RAygHkprBuKM\niMRPaVodJkayMibuMocHE4aZIMuE8Xb1C4KA7qpn92JlUicDE9AZ7H5M8GWi8q2jRzFdqSCXy6FS\nPwthGcBiLrcrtLPICwYba2l6IGl0C3NktTtbgTm1mt2LjcNSpYJqYlX3rPdItoy1Sxrxw+ZT/HBx\nVr9CoUAdZ8wBwNrF6stgc4lFckjThTH2Gw0RR1d0SnOKRfhD6SjOk5qIs4b3PH36AKqitEYNndKS\nKslPp+nVa8yh5nWNUzYG6TWOMmjU0CktYdtMTqlOBwA4TMpWjYFXZ8TQoYZOaUl44gSQ+OIuhSHm\n1dhRQ6eOiOFkIM4IloonggmZTBhlQjYTvKXpdpi4yxwZTLyOOzcWFhboM9mZFEwslu4glzoymLjN\n+p/1Z7FYBIpFYHkZ+QsXGsTjlXIZa0EgTiEkddCw66SphaTpseL9HgQB7SM2Xsn7H6tUdtMwRVzP\n5WCEUTss0qCZcyTJ0tJSqiw5hmzesKgFJvZLx4s5xaTfYdYnrN/j301J9AdDV3RKe86ko1xVp+PJ\nNjXGdThRQ6e0hxi6094DE/z6aurJNpOs6vGGQ4no1dVa+xCAewF4AG9zzn0x9rcTAP4AQB7APzrn\nfqoXFVUGyMmTQOILPO89SphcTWoRQC5h6LaNgWxXodJv2v78WGvvA3CXc+4sgLcA+GjikgcBPOic\n+w4AVWstOS9PGWnyefjjx1PFpyf49bVpaiZ9dR1KJCu6VwH4NAA4575mrS1Za+edczestQGAlwP4\nz/W/3y95aCRqM8GTRTc0FcoTSNMqSXPVs53bTFRN1oWJsUwElkZ8sDQ9TJRlz2U7/FkbSokAfuB2\nOqtcLofyygre+973Nvz9gXvuwaG3vjX1ORYtwXbfs7GWjoM0aoUJ3vH2h2EojsaI9/mxSgUZ7xvm\n8FNBgM1qVZxWSBoFwdra7pD0QqFAnR2sPxhsvNjYsLqxaAnpGR9sDrOyvSIRFI6i8Q3lSr0MqOmx\nGwAestb+rbX2Ix3XSBlK2H46nD8/sTodDeYfQD0UGfvZXmIS/14B8GsAzgH4C2vtDzjn/qLVDVq5\niNnKQsp+Xc+A/Jduv3F3bKtKP2DbEKTE2zprLZDPA/Ff4Vu3sPZv/wYcOdJJFQfKvpM6/sZvAFca\nFcoPvvnNAPtBaAJbNbIyKckVV6ttXO1od9pdKzr5DjM66ZMISWsu4fYKDgCOAXi6/u9VAOedc/8O\nANbazwL4FgAtDV30OsmWvd1+dWX7ktgEYK8vbMnMXiMlxq+TV1e27Je+ukqD7lu9uhaLRdzc2kJh\nZQXmiScarvn+u+7ClxJfCukRi2ysWbvYa5o0EJ2NdTQW3nsYY+iPHPtyRfM14z3eub2NIPHq+uCH\nP4xbxoiPXWRl7HVTun8t+erKxkF6hKc0IUC7Yxcj2BxmY8jqF++n/S40JIbuYQAfAvBxa+2LAFxy\nzm0AgHOuYq193Fp7l3PuGwBejJoHtvVD6x3LOoltGGSDz8rY4DONSnp2KhscNimigZ2fn6eD3Oxz\nzKixySRNJc+MMPsSszK2YTo+PtVqFf7MmZShO16p4AuJcWSGiY2DdHMs6yfpRmU21vF5Mjs7S8eZ\nGeFoHA57D1+poIrbc2QDwE42iwyAZ599NvVZ9kPHflykG9zZPIu3v1Ao0D5ixkWqAbK6sfnKvsPS\n7EDMwHayMo1oq9E55x4F8Ji19lHUPK73W2vfZK19ff2StwP4n/W/rwP4845rpQwnTTYOJ880HXf0\nMJzRQ/Qi7px7IFH05djfvgngZd2slDKkLC/DT03BxFbTee9x1Hs8PUFfdDV0o4du41bkBAEV2yct\nHEwN3eihhk7ZEyy9uho6NXTDzkCyl0SiJhNLmcjKxEgmqjLBmzkB2GeZ4M3E8mZne0YEQSDessDE\nWAYThpmAzhwqDGm6+vh5qnNzc7V6JHS6arWK5TBE1fvdk6+kzhMmxjOPJStj4j4T7Vt5XYGaZ5md\nG8v6o1wuI+c95sMQ0YhE8+t6Lodcvf3SM2yZA4j1HXOMMIdS8hlsrkqdONLzgNl3jo0DTdVPnGft\nHEr7dUzoik7ZG4cPwycmbc57rAyoOv2GZSy5bgzKuqIbatTQKXvDGGCCX19psk3NWDL06Agpe2aS\nj0E8zFIz6Wpu6FFDp+wdsp9uBem0ReMIW9HpgdXDz9A5I6QiKBOL2a5qJoIzMZ6JwNLd3PGwlGKx\nSEVmBhOtWbvYM5m4zT4rDSlqJTQXi0Vsbm7e3hmfy2Eqn4fZ2EAl1r+HKxX8O+TjymDCO4PF8DKn\nDeuTeNzx4uIinTfMYVUul7EEID6jqjs7eHxnB3EXGnMKReF0cdj4s/Fi1zEnQNKpwhwWLLqBzSX2\nfZDGg7PvHHsuGxtWF+lzW6F0yRp8AAAgAElEQVQrOmXvGEOzmaTXeeNFAUAy0jIEcHUAdVH2hho6\nZV9MoqGjxxsCmAw3zGijhk7ZF1Vi6JYBdP6SMbxQfa7vtVD2gxo6ZX/Mz8MndDIDQJ6NbfRQQze6\nDMQZEYm1TOxnYiS7jom2zMnA8ldJc7QxUblVRMbMzAw2NzfpTnsmRjMRnKWakqacl7afXcf6OF6/\nSqWSqpt5/vPxCz//8w1lv/Cd34n5N76x5b1albG6MXF7bW0tVcYcHu1yqJXLZdp2lij15OYmphIO\nj+eyWRQTdZa2lc11aZouaYRDEjaX2DyXpu+XRu1I00OxCAp2v72iKzpl/5BtJkjkqxsbvMch8qXW\nGNfRQA2dsm88Sxt++TJmx3A/3RzS+mMZQPoYGGUYUUOn7J/ZWXpexMkxDAdjq7lVPd5wZFBDp3QG\nyzo8his6euqXGrmRYSDOiEiYZEImE4HZdUxAZREJ0oNVmu2ET8IE7/gzwjCkjgf2OSa8sh3v7c4Y\njWCirfSAlHapdRYXF6lo70+fBv7u7xrKTlQqSMrsTHiWnhnB5oT0zFI2hvF27OzsUAdQ0nlQqlRS\nbVjLZqmTgcHOUWDzRBoZwdoVdyAsLS2Jo4LYuErPqZCe0MXaymjn8Njv4Ti6olM649Sp1OvbkvdY\nGLNV3UFNtjnSqKFTOmN6Gjh2LFU8Tq+vxntq6FY1PdPIoCOldA7R6c6MkaErAcgm2rNlDGTpB5Rh\nQA2d0jlNjkHEmBi7pmdE6KvryDAQZ0QkuDMHANvxLj2VngmtTNxlDgrpWQXsfnHhdmZmhl7DRGtp\n+hkmFjNnjPR8DLbrnYnFkfheLBZbp086cgQZAKYufnvvUQRQCkNcrd+D9TlDukufCe1MGJc4Y9g4\nx685HIYwxjQ882nvsb29TfuXzUPWv0xYZ84oVsY+m+w75rCQ1lfqPGPjyr6bDDau7BmsHXtFV3RK\n5+RywEr61IhxyTqsp36NPmrolK4wzunVmSNCg/lHCzV0SlcI2YE53o+8TpfxHku6oht51NAp3WFl\nBT6hzcwASAeIjRYHvEeQMHQ3UPO6KqODkR623EV8tMOaCZntIg9a3pi0hQn+TNyX7qpv5fAolUq4\ndu0ajQKQ7oxnMLGc9RMT41l9pREU0XWRM4JFEDTwe78HfPObje3/vu8Dzp6lqauYg4P1HRt/dpCx\nNAomGv/t7W1MTU21dBS9IAzxH+tOiEhkfyKTwSfrfX3x4sXUZ5lDhbWVjSGri/TMlPg8aRYZwRwA\n7JlsvkodewzmoGD3Y30Sb9f8/Py+fmF0Rad0jzFM20QdEbpReOTQEVO6BzN0584BwpjWYYSeE6Gv\nrSOHGjqlexw9WgsJi7OzAzz99GDq0wXYik5Dv0YPHTGlewQBQLyvo/r6mifJCbwxuqIbQQYSGRGJ\n2kwslebWL5VKqTKWpkl6ILT0/IZ25wssLi5SJwNLccMEelY36YHYbAe99LDqdtEnhUKBOiyS9wqO\nHMH0V7/aUOa/8Q36WXYINRsv1i4mWrM+ZhEE8XGdnZ2l83B6ehrHwrDhC7Kzs4NrxuB67HrpHJY6\nhVj7pamQkvdjjgfmKJEefM7qwZ4h/c6xMWT9yebmXtEVndJV2MZhXLiAtO9z+KHJNgdQD6Vz1NAp\nXcUfPAifiFc0lQpODKg+naChX+ODGjqluxgDz9I2DaAqnaKhX+ODGjql+5DX11E0dIf1nIixYSDO\niAi2W5oJ+Uy0ZyKoNFqAXcecDKyslbNgcXER6+vrVIxlbWDCKxPe2S7169evp8pYtADbkS+NNIja\ntbCwgJs3b9J6sPtXTpxANvGMO6encWR6Gjux/pOe8cHGi8HGpt3ZCtevX6cOi/L168gAiEvyJpfD\njWwW2dhz2PxiQj5DmgqpVQqtOMl5x9rOvnNsHrL7sygT5nhhz2DjKj0zhDkj94qu6JTuUyrBJ4xi\nAOD4CB2DyDYKXwUQ6opuJFFDp3QfY6j39dSIGzp1RIwuauiUnsAM3SgdbK2GbrxQQ6f0BH/qVKrs\nSBhiekTy06mhGy8G4oyIRGi2M57tFmfCKBOBmbjZLp1NBBOBmTOCEa9zEATiA4cZLF0Uc7ywZzBh\nmLWL9aekrSzygPV5GIZAoQCUSgiuXm24/+LWFv6t/nw21gy2m5/1J3P4sHbFr5ufn0/3r/c4EgQw\nibnzrPeitERszjGHBxtXqfOM3S85PtIzVKSp0ZgDTHruhTTig81hqTOqFbqiU3oGW9WNwjaTeQBT\niS/mjjFIf82VUUENndIzwhE1dDQ1E6DHG44wojWhtfYhAPcC8ADe5pz7IrnmIwDOOude2dUaKiNL\nePJkquwQgKL3uDnERoOFfmlExGjTdkVnrb0PwF3OubMA3gLgo+SaewC8ovvVU0aamRmEh9Pro9P9\nr8meYCs6jYgYbSQrulcB+DQAOOe+Zq0tWWvnnXNx5fNBAO8H8AuSh0ZpjaQpXpjzQHogcLud8RFM\nQI2nX4pg4nu8fsYY8Q59di/WBibGsrRH0jz/rC7tDr9mu+Kbfa7BOXPnnQiuXsUDDzywW/aub/92\nVF/7Wuo8YBEaTKBm9ZHuoI/PMe99ahwO1g+sjnOlybiyerA5zOYccxYwhw/rE0nUDutfdn9WX5ai\njM055rRgziM2htKD2ePfdemh70kkGt1RAFdi//9KvQwAYK19E4DPAzi3rxooYw3bTxcMcSJO4z0O\nknJ9dR1t9uO33f3ZsNYuAXgzgFcDSB/V3oTol4xZb1bGkCYj7PZn2a9wPLaP/fp2+kwGW71Jn7uf\nurCVpojnPx/I5xtjX7e2MF2p0JVEv0nF266uAh/7WGPZzAw++K53iZ0RbCUlRbpiYSvp5Gelp9FJ\nYW84UjqZ/91IvCkxdJcQW8EBOAYgOgTge1DTlx8BMAXgDmvtQ865d7S6YbTcZa9VrKzdcjaCfRml\nGWvZddJX12gJPjc3h42NDfE+OumrK5uw/Xh1jV4Fo+MOGZLMuZlDhxA++WTjvf/1X1F8RVrWZT8U\nrL7slVH6Ohu1dX19HQsLCw1z6W7v8Z+8b+jzc8bgf33gA7SPWL9IjzZkfcdecVmfsHbF+2lubo7O\nafbqyurB9l+yOccMszSDt/S1Nz4+LLO4BImhexjAhwB83Fr7IgCXnHMbAOCc+2MAfwwA1trTAH6n\nnZEDblecfalZh0jPV2UDy+4nPf+VTSZWFh9YYwzVHpjmwb6YzQxKEtZ3bEOnNPMLI6nRsX6TZILJ\nrKwgmzB0wfnzdNJK03pLtdx2hjgIgoY+Ol0uY6pSaZg3q3V9jv1AsrGWZtFh85rNE6nml+zPVufV\nxmH1lep20h9wqX7KFjCdrCQj2mp0zrlHATxmrX0UNY/r/dbaN1lrX9/x05WJgO2nM+fPA0Pw6ppE\nt5aMJyKNzjn3QKLoy+SacwBe2XmVlHHDHz8OZLNA3Dt98yYOeI+rQ7Ztg50ToTGuo49GRii9J5dD\nuJL2VQ1b2qaM91jSFd1YooZO6QujkJ/ugPdIrt02jMG2ruhGnoFkL4nEeyYyM28PE5SZx4aJxVIn\ngDTVsyTtNLu/1NPJvE6sbswDxp7L6ivt4/j9pqen6TMZzFGy/bznIXjkkYay49UqfLUKH+s/JoJL\nnVFSz2bc83jjxo1db/WhWD9Hff40gHL936z90q0P7LPMQcHut7a2lipjmX/i839mZka844CJ/VKn\nIHN2sRT57BlSx1O8rJcbhhWlY/zyMnziS1zwHoeHyCHBHBHPDqAeSvdRQ6f0h0wG/kT6dNdhen3V\nA6vHFzV0St8Ydp1Ot5aML2rolL7B9tOdCEMEQ/D6mvce84l6eNTz0Ckjz0CcEZEIKU2RzKIFpGdH\nsp3W0hTO0t3ccdHee0/rxoTXa9euie7PYOIua7/UkcPKojobY5rGpbI+Yg6QfD4PnDwJUyzCxHb1\n5wEse4+n6g4Jdj8m0DOHCvssmzvxPonadjAMG9qYzWZx1Rhks9ndLwlz9rBwJ9Z+5hRjjgHmjJIK\n/sm6MOGejbM0ZI3dTxqyySI5pE4x1sd7RVd0Sv8wBiCrutND8PpKNwoPoB5Kb1BDp/SVYdXpmD6n\nERHjgxo6pb+cSZ8asRKGyA5Ypzuohm6sUUOn9JeDB+ETG4ozAFYGbOgOaYzrWDMQZ0SUX4uJ8Ux4\nlZ5DykRQaY4y5qBg92u3c9t7T0Vbtqtc6lBhoq00koOJ1tJzPOMOjyAIxGl62qWfyi4vI/PVr+Lt\nb3/7btnPnD2Lyn334TA5Y0LqeGBjw4i3Y3Z2FpXr15EBEP+0yeVwLZE+ndWDwQR1Nl+lES8MNl+T\nfcKcDOyZrC/ZWEtT2ktzRUpTXMWv228STl3RKX0nZOnVz5/vf0XqNDveMNQV3dighk7pOzQ/3TPP\nAMIVWbdhhk5fW8cLNXRK/1lchE/sAzRhiODChYFURw3d+KOGThkIbFU3qNdXNXTjz0CcEZFIygRK\nqcjOBH92HRPLmXNDegAJe0bcaVEoFMQHgUhTzjDBlzlymFguTV3EnEDRGRSLi4v0PApAfphPqn/v\nuQeVf/mXxno99ZRYBJem0GL1i4vlz928iZVcDkm30NVMBkGiHcyx0zQKJAEbQ+nJaszJwgR/1ndJ\n2DhLnRZsHNhYs2ew+7F+kqYf2yu6olMGA3FImGefRaHP20wWUAtDi7MDIG3SlFFGDZ0yGObm4A+m\nj4o+2ecoiaavrfrqOlaooVMGxjCEg6k+NxmooVMGxjAYukOkTA3d+DEQZ0QkmjJBlaUDYqItE1CZ\nCMqewURQJrYzcZdFMyQPsGawZ7I0PdKDtNudGRDB+lMqAsf7c35+norxzLHB+pw5hRatBXK5hvNd\nFysVFIIAG7F+lO7mZ33Hdt/HowqOZTLYSdTtfLmMTP0ciTgLpIzNQ+agYE4h1uesDUyMZ3VJ9hPr\nc9aXDPZZ6cHvrP0M9p1jh5prmiZltCkUgKNHU8V9W9VVq0irhHpOxDiihk4ZLCSbyel+eV7X1pBJ\nPOs5AOl1sTLqqKFTBgsxdKfCsOF1tmdcTp8IoWdEjCdq6JTBcuoUkND55r1HWqnpAWroJoaBRkYw\nkZWJm0xkZ59l10lz0DNHBhOyWwn5pVIJGxsbNEJBmjOftYs5AVh9Wd2k6YGY4yUSlYMgQLVapdEj\nrC9ZPVo5lLKHDiG4eLGhbsfLZVypjx2bE6wsfjB1BEu1tVu/y5eRzWYbHBurxiAwBk8//XTqc0w8\nZ+mSmBgvTQ3GoiCk5zckYXOJfR/YPGSOB9aX0ggV9t1k84RFX8Q/y5wVEnRFpwwcts2kLzqdrugm\nBjV0ysBhAf6nve+pTpf1HlhbS5WroRtP1NApA8evrMAnXs9mvKebebvFAWJI143Bjm4WHkvU0CmD\nJ5uFP348VdzL11c93nCyGIgzIhI1mVDOdpozIVtygC/ABU8mtLIyaZqmJExQZbCd8UzwZ4dVszRN\nTHyWpp9iDopIBF5YWMDm5iYVz6XneTDiUSbmjjsQPPkk3ve+9+2Wvdda+De+Uex4kZ4ZEh1YHf07\nEuivBgGy9X+zPpKOA3PsMGcUcwwwmIOCzbHkc9lcZePM7s8iI1j/svFnbZU6Xtj3UNM0KWMDc0jg\n/HmgR1ESh8kXSiMixhc1dMpwcOwYkPjVN1tbwDPP9ORx9NVV9bmxRQ2dMhwEAfzJk+nyJ57o+qOm\nvMdcYkXnjcFq15+kDAtq6JShgb2+mnPnuv6cQ+S1dQ1AVVd0Y8tAnBGRgCk9C0K6453BRFDmyJDu\nvm8XacGEc4C3laUzkh7+ywRvJuSyXfVMBGZtTR70zGBiNHsm2xmfcpTceSeCz32useziReQzmdQZ\nq+0OEo9gO+ln19dRrvdVuVyGMQZXEodVs3RcLDJCmhqKjSGb18zhIT2rIl7WTMBnTgaG9BBuNi/Y\n+LP6Sp2H3UBXdMrwcOQIkAxHKpex0uVtJppVePJQQ6cMD8bQQ3O6nZ+ObUTWiIjxRg2dMlywtE3d\nXNF5T7eW6IpuvFFDpwwXz3teqmglDGuxqV1gFkAyV0cFNWeEMr4MxBkRicZs1z4TQZnIzHauszIm\n0LN8+1JnQatIi5mZGWxvb4vz/jPBm4m7TLRm7WL9yQRk1k8sIiVelyAIxGcQMDFaOl7h3ByC2Vkg\n1ubqzg6WdnbweGzVxZxRrP3JMTzsfUPfee+xns+nnFZSJwubD+w6Nl6SA6f38ox4REI+n6cOEBaN\n0+4clAj2HZFGwbQ7+L3V/ZhDca/oik4ZLoyh20zSL7T7g762CkOxlNFFR1gZOnpp6NgeOtXnxh81\ndMrwQQzdMdQiGjpFt5ZMJiKNzlr7EIB7AXgAb3POfTH2t+8G8BEAVQAOwE845/p7CrEyXiwuAktL\nDYkxDYBTAL7eyX29x0FiLFf11XXsaWvorLX3AbjLOXfWWns3gN8GcDZ2yScAfLdz7qK19pMAvh/A\nZ1rdMxJXpQdYMzGSpalhTgDpYc1MLGW76plYGhdVZ2ZmaJoaJh4zEZiJ+8x5whwD0lRA0rM6krA+\nlx5WzNrAxiEaL3/yJIKrVwEA7373uwEA73zJS1B59asBACsrK6nPMqdNfPwXvUfO+9p+vTo7xuDS\nzZsNZQDvN1bGohakTgs21mxOSM+lSNZPGnnEnH0Mabok1lZpxAO7jjmt9orkp+xVAD4NAM65rwEo\nWWvjcU4vds5drP/7CoADHddKmXiYThc8+WRH92SvrZeNSRk5ZfyQvLoeBfBY7P9fqZfdAADn3A0A\nsNYuA3gNgA+2fWj9F49tB5DSicu5WTyqBMnKRxqH2wnsl5+VdYsgCDoaL0bLcbAWqM+T3RXSxgZm\n83lgdpbGzrblkUeAz362oegTn/oUPvFDPyT6OOtfdoJWt2ErKVaWXA1J5irQnzYMmv3so0v9/Flr\nDwP4cwBvdc5dbXeDaCnKXrU6eXVlE5EthdmesU5eXZMTSvrqKt2DxiY1e3VlryDsdUv6ShM9NwgC\nhGFIpYZevboim0WmVIK5cqWhrTtf/jLCu++mr66s3+Pj/7owxAtiff7BD34QL3396/EFUl92L9bn\nbD508urKfiTZdazf4+M/NzcnPuqyk1dX1lZWJqVdsgK2N1CCpEaXUFvBRRwDsHvoZf019i8BvN85\n97Dkoa02GbJfeZY1gsEmkzRTBzOcbFIwwxF9KQqFAm7dukUNs1SPkU5q9qWTZsiQppeP+mR6eho7\nOzv0GraxVLohm9UjbmCyy8vIXrrU8MUJLl1C+MIX0rqw/oyP6xJqHrNMbAxXgwCzxLhIf4TZfGU/\nCO3qFsHGlfUd+2zSEEnHS9oG6Y+1JM07IJ+b+zVucSQa3cMA3gAA1toXAbjknIv/FD8I4CHn3F91\nXBtFicGOQTTnz+/rXgGAg6Rcg/kng7YrOufco9bax6y1jwIIAdxvrX0TgHUAfw3gvwC4y1r7E/WP\n/L5z7hO9qrAyOYQnT6YcBWZtDSCeznYcAJB68ZqdxaYxkClZyigjepl2zj2QKPpy7N+dB6IpCmN6\nGuGRI8BqY5Lz/WQdZh5XHDmyr2opo4fulFSGmrBL6dWpoTtMS5UxZCDZSyJhVnquIxM8l5aWUmXS\nFOlMLGVCq3QzaCQgR84IJh4zj5X0TFQm7ksdGcx50srxwO4XOSOYUMzawO7PEG2bOHMG2X/+58ay\np57CTKGQeq1lW06i+h2rVpGp12t3DA8fxvT0NJ4hJ42xucm2YbDNrGwbjtTTz8aLifFs/JOODOk4\nsznHxob1CUv9zhwqUicIuy5+v/1uodIVnTLU+OPHgeSX7sYNlPYY96oruslGDZ0y3OTzwPHjqeK9\npFfPeY/0ugPAIZZUXRlH1NApww9Jr35yD4buIACTWAGuG5M6MFsZX9TQKcMPO0eiWgWEr680B51m\nLJkoBuKMiHadS8+wlIZxSXefMxGYORmksYLx6+bm5sS7xdn9mRjL+oSFCjGxmF3HdqSznevxfsrl\ncmJnB9tVzz4rjW54bnEROQAmJkpPhyGWKpUGg8Xul8/ncaxSQSbWljAMEbkfyuWy+BxSdh0bL9a/\nrJ+Yk4nNa+bwkIRFMqeANDyNlTFnD5ubrF2sT1gb2kXLqDNCGV+y2ZpTIoFUp9OswooaOmUkYOFg\nUkOnxxsqauiUkYDlpzsZhiknQ5Jp71FMXBMCWOWXK2OKGjplJPBHj8InNJ0pAMttDB17bV0zBlVd\n0U0UA3FGRAI5E8+Z2MiEXCbQMsGf7b6WRi4wMZcJqPF2hGFI2yXN0cXqwRwKTBhmn2VOACagt3Iq\nFAoFbG1t0R36rK2sj9h4sc+yuu2O67FjyHzzmwCAd7zjHQCAn33lK1H9ru8CAJwir7cHNjdTToq1\nXG53nuVyOXFKf9ZHneSUk57Xy8aVOS3i83VmZoaOlzRXIpv7LDKEfZekfSLN+Sc9/7YVuqJTRobq\nyZOpsnZxr2xLsOpzk4caOmVkYA6J4OJFoMXhKeqIUAA1dMoI4Q8dgk++PlUqME891eQDXreWKADU\n0CmjhDGoslVdk6zDRdS8rnEqxuC6GrqJYyDOiEhcZWIkE1ClO+2lu++ZgCo9Vardbv5sNktFdulO\n80526bN0O6wuzEHDnAXx6+bn56mzR5q6SJqSiDkyGoTsb/1W4Ny5hroE588jNCZ1tsiS98gk7rca\nBFiPHcpz48YN+kzmAGDjJXUUsT5nc0l6oA37niTvJz0PVeoUYWPN6sEcCqw/mZNB6gTaK7qiU0YL\nEvdqLl0CiBFmSZj0tXUyUUOnjBalEpCIpTRhCHPhQupSZuhWNZh/ItFRV0YLY+iqjul07ESIy7qi\nm0jU0CmjB3t9Te6n857uodMV3WQyEGdEJKRLBFVAfso5S3vExHhWJt19zZwAkbNkbm4Om5ubVASW\nHjjNhGzpgcDS3P9MfG51tkahUKB1AHi72LWsrdeuXUuVsbFJOa0WFlBIOjcuXcKMMdiqr9hK3iPv\nPbZi99sCcGF7u6HvZmdnxc4eJoqzw9VZdA9LZ8SiQNh4sfq1czRks1nqZGHfL+ZQkR6uzeYrS9PE\n+m5jYyNVxr7X8T7Z72HW+vOmjB7z8/DJw5G8R3zjCdPn9LDqyUUNnTKSsCiJ+AutGjoljho6ZSRh\nca9nYq9lTJ9TQze5qKFTRpKQGLpDAGbrxo7FuKqhm1wG4oyIhFQmqEoFdYZUVJXm6mf3Y4KsBOnh\nz9JUQEygZiI462PmeGDXxetXrVbFTiGG9MwM1v5SqZQqKxeLCI4fh7l823xNTU3hBfk8XBBgZWsL\nARr7aTOfR9EYXIjtubt48SIVuNfW1lJlbLwY0rY2c/AkYXOORRXF+25xcbHrc4Q5Mljd2HepbcRL\nHebckJ7d0gpd0SkjC8s6fKpaxZL3qYn9nDG4pXvoJhY1dMrI4tkxiGGoGUuUFGrolNHl1Cn4xKvu\nove4g7yyaUTEZKOGThldpqaA5eVU8X8ghk5XdJPNQJ0RTNxksPQwTIxljgx2SDYTS1kaHXY/JubG\n61KtVqmgLj2ngkUGMDGWtZ8hjb5gdY5HB2SzWXHaHxZVwJwWbFzbnYWQesapU7UswwDe8573pK77\n8Ic/DKDR0MWF8ampKep4YHVjYyNNZ8TmDStrFxkQwRwZyX6XHlTO7s8iPubm5lJlbN6w69j92Heu\n3QHW7N4SdEWnjDTMIcFY1RXdRKOGThlp/PHj8G22H103BmU1dBONGjpltMnlgOPHW16i+pyihk4Z\necI2r69q6JSBOCMiEZYJz+3EyOQ94kgPuu7koGf22bgg7b2n9WD3YiI4axcT95kIztogdSC06vfp\n6Wlsb2+L0/6w+jIhXxpVwZ4RnxPm6FFMlctN0xldrFZxK+bQiF9XrVbFB06ziBom+LO+lKYLY21l\n/c7mU7L90sgT6WHozAHC5hcrY33HnEzdOB+CoSs6ZeTxy8sAMS4RGuOqqKFTRp9MBmETnS4EsNrf\n2ihDiBo6ZSxgaZuAmpELVaObeNTQKWMBS8QJaOiXUmMgzohI/GSiLStjIqj0kGh2nRQmDLfbbT47\nO0udLNKDpNn92U57Btv1Lk0FxaJA4gLywsKC+KBjacQLgwnULE1Tqj/PnEG2WAQS7fj9v/kb+Je/\nvGn98vk8Fc9Zn7M+Yn3OzkJg9+vEkdPuDI5CoUCdeOy7JD1HQnq4OoteYGdmsKgl1nfMQbdXdEWn\njAdBQKMk/CGWa1iZNNTQKeMDSduEw+z0CGXSUEOnjA2pFV0uB5DXXmXyEGl01tqHANwLwAN4m3Pu\ni7G/vRrAhwFUAXzGOfeLvaioorTl4EGgWATqGqk/dAhQZ4QCgaGz1t4H4C7n3Flr7d0AfhvA2dgl\nHwXwfQCeAvB5a+2fOOe+2uqekVjJxG0mDDPhtZPDdJmAKk2P0ypNUz6fx9bWlvhsBeYUYG1lfcKe\nER2kHUeaHordLxK3S6USrl27RtsuTTUlTcnEHA+s/c2cUf7kSQRf+QoAIDxwANttHAjN0k+xucnG\ni/UbE+OZY0A6v1gZ67uks4BFRrAy5gBgTgvm2GJOC+a0kTrF2Pc1HkEkdcylniW45lUAPg0Azrmv\nAShZa+cBwFr7PABrzrkLzrkQwGfq1yvKQIi/vqojQomQGLqjAK7E/v+Vehn722UA6ZSvitInGnQ6\ndUQodfazj66V6CERRHavYfvIpHTyWenxiVLirxad1Avgr0JS2GtvJ8Rfc9grZTPY6wxD2la2f6tp\nPy8vA7/0S7XPAUiHwzcSBMG+X4f2QrefIRlr6TPZ62IndHseLi0tdXwPyYruEm6v4ADgGICnm/xt\npV6mKIoyNEgM3cMA3gAA1toXAbjknNsAAOfcOQDz1trT1tosgB+sX68oijI0GEm4jrX2lwG8ArVk\nEPcDeCGAdefcp6y1rwDw3+qX/olz7n/0qrKKoij7QWToFEVRRhmNjFAUZexRQ6coytjT0zRN4xo6\n1qZd3w3gI6i1ywH4iY4moNUAAAL4SURBVPpm6qGnVbti13wEwFnn3Cv7XL2OaDNmJwD8AYA8gH90\nzv3UYGq5d9q0634AP4raXPySc+7tg6nl/rDWvgDAnwJ4yDn3scTf9mQ/eraii4eOAXgLaqFicT4K\n4EcAvBTAa6y19/SqLt1E0K5PAHiDc+6lAOYAfH+fq7gvBO1CfYxe0e+6dYqgbQ8CeNA59x0AqtZa\nnq54yGjVrnr00rsAvNw59zIA91hr7x1MTfeOtXYWwK8D+GyTS/ZkP3r56jquoWNN21Xnxc65i/V/\nXwFwoM/12y/t2gXUDML7+12xLtBqLgYAXg7gz+p/v9859+SgKrpHWo3ZTv2/Yn3r1wyA9LFzw8s2\ngNeC7Mvdj/3opaEb19CxVu2Cc+4GAFhrlwG8BrVBGAVatsta+yYAnwdwrq+16g6t2nYIwAaAh6y1\nf1t/NR8VmrbLObcF4EMAHgdwHsAXnHNf73sN94lzruKcS2dCqLFn+9FPZ0SnoWPDSqru1trDAP4c\nwFudc1f7X6WusNsua+0SgDejtqIbB0zi3ysAfg3AfQBeaK39gYHUqnPiYzYP4H0Ang/gDIDvtNZ+\n26Aq1mPa2o9eGrpxDR1r1a5ogv0lgA8450YpSqRVu74HtZXPIwA+BeBFdRF8VGjVtlUA551z/+6c\nq6KmCX1Ln+u3X1q1624AjzvnVp1zO6iN3Yv7XL9esWf70UtDN66hY03bVedB1LxEfzWIynVAq/H6\nY+fcPc65ewG8HjXP5DsGV9U906ptFQCPW2vvql/7YtS85aNAq7l4DsDd1toow8JLAHyj7zXsAfux\nHz2NjBjX0LFm7QLw1wCuAfi72OW/75z7RN8ruQ9ajVfsmtMAfmcEt5e0mot3Avgd1H74/wXAT4/Q\nlqBW7fpJ1CSHCoBHnXPvHlxN94a19sWoLRpOAyijltj3zwA8sR/7oSFgiqKMPRoZoSjK2KOGTlGU\nsUcNnaIoY48aOkVRxh41dIqijD1q6BRFGXvU0CmKMvaooVMUZez5/z+PFdJmqKISAAAAAElFTkSu\nQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9de5a8e90>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "visualize_prediction(X_train_5[0], Y_train_5[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "id": "vEznmu-tneqn",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 29.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 544.0
    },
    "collapsed": true,
    "outputId": "b6759653-1aca-4545-a5b2-bcd1ab43f05c",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123311906E12,
     "user_tz": -60.0,
     "elapsed": 13555.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating data:\n",
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n",
      "100\n",
      "110\n",
      "120\n",
      "130\n",
      "140\n",
      "150\n",
      "160\n",
      "170\n",
      "180\n",
      "190\n",
      "200\n",
      "210\n",
      "220\n",
      "230\n",
      "240\n",
      "250\n",
      "260\n",
      "270\n",
      "280\n",
      "290\n"
     ]
    }
   ],
   "source": [
    "[X_test_5, Y_test_5] = generate_test_set_regression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "UmM9F0rBneqo",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "X_train_5 = X_train_5.reshape(-1,1,72,72)\n",
    "X_test_5 = X_test_5.reshape(-1,1,72,72)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"Somehow Normalise Y \": \n",
    "Move the 3 vertices into the center of the coordinate by transforming Y to Y-0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "b6VvWdKineqp",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "# from sklearn.preprocessing import StandardScaler\n",
    "# scaler = StandardScaler()\n",
    "# scaler.fit(Y_train_5)\n",
    "# Y_train_5 = scaler.transform(Y_train_5)\n",
    "\n",
    "Y_train_5 = Y_train_5 - 0.5\n",
    "Y_test_5 = Y_test_5 - 0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Regression Model: 4 convonlution layers, 3 densely-connected layers with BatchNormalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "a5t5EFOwneqq",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "model_5 = Sequential()\n",
    "\n",
    "model_5.add(Convolution2D( filters= 8, kernel_size=10,\n",
    "                           padding= 'SAME',activation = 'tanh', input_shape=(1,72,72),data_format=\"channels_first\") )\n",
    "model_5.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "ZMu5L6Wineqr",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "model_5.add(Convolution2D( filters= 16, kernel_size=5,strides=(2, 2),\n",
    "                           padding= 'SAME', activation = 'tanh',data_format=\"channels_first\"))\n",
    "model_5.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model_5.add(Convolution2D( filters= 16, kernel_size=5,strides=(2, 2),\n",
    "                           padding= 'SAME', activation = 'tanh',data_format=\"channels_first\"))\n",
    "model_5.add(MaxPooling2D(pool_size=(2, 2)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "K4vGXmyvneqs",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "model_5.add(Convolution2D( filters= 32, kernel_size=2,\n",
    "                           padding= 'SAME', activation = 'tanh',data_format=\"channels_first\"))\n",
    "model_5.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model_5.add(Flatten())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "id": "yV8NFHQanequ",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 13.0
      },
      {
       "item_id": 24.0
      },
      {
       "item_id": 36.0
      },
      {
       "item_id": 40.0
      },
      {
       "item_id": 41.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 2414.0
    },
    "collapsed": true,
    "outputId": "21becc25-7c4f-4ccd-e990-a4cbf97e0360",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123331383E12,
     "user_tz": -60.0,
     "elapsed": 10968.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/70\n",
      "300/300 [==============================] - 0s 1ms/step - loss: 0.0863 - acc: 0.1767\n",
      "Epoch 2/70\n",
      "300/300 [==============================] - 0s 439us/step - loss: 0.0831 - acc: 0.2200\n",
      "Epoch 3/70\n",
      "300/300 [==============================] - 0s 447us/step - loss: 0.0811 - acc: 0.2200\n",
      "Epoch 4/70\n",
      "300/300 [==============================] - 0s 439us/step - loss: 0.0794 - acc: 0.2233\n",
      "Epoch 5/70\n",
      "300/300 [==============================] - 0s 432us/step - loss: 0.0743 - acc: 0.2700\n",
      "Epoch 6/70\n",
      "300/300 [==============================] - 0s 433us/step - loss: 0.0693 - acc: 0.2533\n",
      "Epoch 7/70\n",
      "300/300 [==============================] - 0s 423us/step - loss: 0.0653 - acc: 0.3067\n",
      "Epoch 8/70\n",
      "300/300 [==============================] - 0s 436us/step - loss: 0.0624 - acc: 0.3033\n",
      "Epoch 9/70\n",
      "300/300 [==============================] - 0s 445us/step - loss: 0.0617 - acc: 0.3167\n",
      "Epoch 10/70\n",
      "300/300 [==============================] - 0s 446us/step - loss: 0.0601 - acc: 0.3400\n",
      "Epoch 11/70\n",
      "300/300 [==============================] - 0s 427us/step - loss: 0.0591 - acc: 0.3100\n",
      "Epoch 12/70\n",
      "300/300 [==============================] - 0s 447us/step - loss: 0.0584 - acc: 0.3300\n",
      "Epoch 13/70\n",
      "300/300 [==============================] - 0s 467us/step - loss: 0.0579 - acc: 0.3633\n",
      "Epoch 14/70\n",
      "300/300 [==============================] - 0s 463us/step - loss: 0.0572 - acc: 0.3600\n",
      "Epoch 15/70\n",
      "300/300 [==============================] - 0s 446us/step - loss: 0.0569 - acc: 0.3200\n",
      "Epoch 16/70\n",
      "300/300 [==============================] - 0s 452us/step - loss: 0.0554 - acc: 0.3567\n",
      "Epoch 17/70\n",
      "300/300 [==============================] - 0s 464us/step - loss: 0.0554 - acc: 0.3700\n",
      "Epoch 18/70\n",
      "300/300 [==============================] - 0s 497us/step - loss: 0.0531 - acc: 0.3633\n",
      "Epoch 19/70\n",
      "300/300 [==============================] - 0s 446us/step - loss: 0.0526 - acc: 0.4033\n",
      "Epoch 20/70\n",
      "300/300 [==============================] - 0s 467us/step - loss: 0.0498 - acc: 0.4200\n",
      "Epoch 21/70\n",
      "300/300 [==============================] - 0s 494us/step - loss: 0.0490 - acc: 0.4300\n",
      "Epoch 22/70\n",
      "288/300 [===========================>..] - ETA: 0s - loss: 0.0486 - acc: 0.4028"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300/300 [==============================] - 0s 455us/step - loss: 0.0480 - acc: 0.3933\n",
      "Epoch 23/70\n",
      "300/300 [==============================] - 0s 438us/step - loss: 0.0468 - acc: 0.4400\n",
      "Epoch 24/70\n",
      "300/300 [==============================] - 0s 459us/step - loss: 0.0465 - acc: 0.4367\n",
      "Epoch 25/70\n",
      "300/300 [==============================] - 0s 435us/step - loss: 0.0451 - acc: 0.4467\n",
      "Epoch 26/70\n",
      "300/300 [==============================] - 0s 475us/step - loss: 0.0438 - acc: 0.4467\n",
      "Epoch 27/70\n",
      "300/300 [==============================] - 0s 463us/step - loss: 0.0441 - acc: 0.4400\n",
      "Epoch 28/70\n",
      "300/300 [==============================] - 0s 466us/step - loss: 0.0414 - acc: 0.4533\n",
      "Epoch 29/70\n",
      "300/300 [==============================] - 0s 447us/step - loss: 0.0398 - acc: 0.4733\n",
      "Epoch 30/70\n",
      "300/300 [==============================] - 0s 455us/step - loss: 0.0387 - acc: 0.4867\n",
      "Epoch 31/70\n",
      "300/300 [==============================] - 0s 443us/step - loss: 0.0361 - acc: 0.5000\n",
      "Epoch 32/70\n",
      "300/300 [==============================] - 0s 481us/step - loss: 0.0346 - acc: 0.5000\n",
      "Epoch 33/70\n",
      "300/300 [==============================] - 0s 460us/step - loss: 0.0347 - acc: 0.5000\n",
      "Epoch 34/70\n",
      "300/300 [==============================] - 0s 463us/step - loss: 0.0311 - acc: 0.5300\n",
      "Epoch 35/70\n",
      "300/300 [==============================] - 0s 492us/step - loss: 0.0292 - acc: 0.5200\n",
      "Epoch 36/70\n",
      "300/300 [==============================] - 0s 464us/step - loss: 0.0278 - acc: 0.5567\n",
      "Epoch 37/70\n",
      "300/300 [==============================] - 0s 482us/step - loss: 0.0264 - acc: 0.5533\n",
      "Epoch 38/70\n",
      "300/300 [==============================] - 0s 449us/step - loss: 0.0248 - acc: 0.5800\n",
      "Epoch 39/70\n",
      "300/300 [==============================] - 0s 455us/step - loss: 0.0227 - acc: 0.6000\n",
      "Epoch 40/70\n",
      "300/300 [==============================] - 0s 456us/step - loss: 0.0215 - acc: 0.6267\n",
      "Epoch 41/70\n",
      "300/300 [==============================] - 0s 494us/step - loss: 0.0207 - acc: 0.6033\n",
      "Epoch 42/70\n",
      "300/300 [==============================] - 0s 454us/step - loss: 0.0197 - acc: 0.6300\n",
      "Epoch 43/70\n",
      "288/300 [===========================>..] - ETA: 0s - loss: 0.0183 - acc: 0.6424"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300/300 [==============================] - 0s 473us/step - loss: 0.0184 - acc: 0.6467\n",
      "Epoch 44/70\n",
      "300/300 [==============================] - 0s 463us/step - loss: 0.0169 - acc: 0.6367\n",
      "Epoch 45/70\n",
      "300/300 [==============================] - 0s 468us/step - loss: 0.0175 - acc: 0.6533\n",
      "Epoch 46/70\n",
      "300/300 [==============================] - 0s 463us/step - loss: 0.0159 - acc: 0.6500\n",
      "Epoch 47/70\n",
      "300/300 [==============================] - 0s 458us/step - loss: 0.0143 - acc: 0.6700\n",
      "Epoch 48/70\n",
      "300/300 [==============================] - 0s 464us/step - loss: 0.0126 - acc: 0.6900\n",
      "Epoch 49/70\n",
      "300/300 [==============================] - 0s 470us/step - loss: 0.0117 - acc: 0.6900\n",
      "Epoch 50/70\n",
      "300/300 [==============================] - 0s 457us/step - loss: 0.0102 - acc: 0.7167\n",
      "Epoch 51/70\n",
      "300/300 [==============================] - 0s 448us/step - loss: 0.0093 - acc: 0.7333\n",
      "Epoch 52/70\n",
      "300/300 [==============================] - 0s 462us/step - loss: 0.0089 - acc: 0.7433\n",
      "Epoch 53/70\n",
      "300/300 [==============================] - 0s 453us/step - loss: 0.0081 - acc: 0.7367\n",
      "Epoch 54/70\n",
      "300/300 [==============================] - 0s 448us/step - loss: 0.0079 - acc: 0.7333\n",
      "Epoch 55/70\n",
      "300/300 [==============================] - 0s 480us/step - loss: 0.0070 - acc: 0.7733\n",
      "Epoch 56/70\n",
      "300/300 [==============================] - 0s 446us/step - loss: 0.0067 - acc: 0.7633\n",
      "Epoch 57/70\n",
      "300/300 [==============================] - 0s 461us/step - loss: 0.0060 - acc: 0.7867\n",
      "Epoch 58/70\n",
      "300/300 [==============================] - 0s 484us/step - loss: 0.0058 - acc: 0.7633\n",
      "Epoch 59/70\n",
      "300/300 [==============================] - 0s 488us/step - loss: 0.0052 - acc: 0.8067\n",
      "Epoch 60/70\n",
      "300/300 [==============================] - 0s 455us/step - loss: 0.0048 - acc: 0.8300\n",
      "Epoch 61/70\n",
      "300/300 [==============================] - 0s 468us/step - loss: 0.0046 - acc: 0.8100\n",
      "Epoch 62/70\n",
      "300/300 [==============================] - 0s 449us/step - loss: 0.0045 - acc: 0.8600\n",
      "Epoch 63/70\n",
      "300/300 [==============================] - 0s 445us/step - loss: 0.0040 - acc: 0.8133\n",
      "Epoch 64/70\n",
      "300/300 [==============================] - 0s 460us/step - loss: 0.0039 - acc: 0.8433\n",
      "Epoch 65/70\n",
      " 32/300 [==>...........................] - ETA: 0s - loss: 0.0034 - acc: 0.9375"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "300/300 [==============================] - 0s 467us/step - loss: 0.0035 - acc: 0.8467\n",
      "Epoch 66/70\n",
      "300/300 [==============================] - 0s 451us/step - loss: 0.0034 - acc: 0.8600\n",
      "Epoch 67/70\n",
      "300/300 [==============================] - 0s 443us/step - loss: 0.0030 - acc: 0.8700\n",
      "Epoch 68/70\n",
      "300/300 [==============================] - 0s 469us/step - loss: 0.0028 - acc: 0.8633\n",
      "Epoch 69/70\n",
      "300/300 [==============================] - 0s 452us/step - loss: 0.0027 - acc: 0.8767\n",
      "Epoch 70/70\n",
      "300/300 [==============================] - 0s 462us/step - loss: 0.0025 - acc: 0.8600\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7ff9def8dc50>"
      ]
     },
     "execution_count": 92,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "BatchNormalization(axis=1)\n",
    "model_5.add(Dense(36, activation='tanh'))\n",
    "model_5.add(Dense(36, activation='tanh'))\n",
    "model_5.add(Dense(6, activation='tanh'))\n",
    "# model_5.add(Dense(6, activation='softmax'))\n",
    "model_5.compile(optimizer='adam', loss='mean_squared_error',metrics=['accuracy'])\n",
    "model_5.fit(X_train_5, Y_train_5, epochs=70, \n",
    "            batch_size=32,callbacks = [early_stopping_monitor])\n",
    "# validation_split=0.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add 0.5 back to Y for prediction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "id": "leMDq4VCneq2",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 324.0
    },
    "outputId": "bf951c99-fc98-451e-e8de-c3123e096fcd",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.51812335873E12,
     "user_tz": -60.0,
     "elapsed": 688.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAToAAAEzCAYAAAChTc+UAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJztnXmwXVWd779r73POHZN7E0JIwhCG\nhCWDIAGUMEOQgCAocxC76KdVPdBV2lb7nk+7q5496HvVTVFtW1ZpV9tWta0yKEOLkAREpiBCcEBN\nL4QYBDKQgeQmudM5Z6/3x7077Jz9Pef87hnvPfl9qihu9tln7zXt31n7+1u/3zLeeyiKonQyQbsL\noCiK0mzU0CmK0vGooVMUpeNRQ6coSsejhk5RlI5HDZ2iKB1PRnKStfZUAA8CuMs599WSzy4D8CUA\nRQA/cs79XcNLqSiKUgdVZ3TW2j4A/wLg8TKnfAXA9QDOA3C5tfbkxhVPURSlfiSvrmMAPgRgc+kH\n1trjAexyzr3hnIsA/AjAisYWUVEUpT6qGjrnXME5N1Lm4wUAtif+/TaAhY0omKIoSqMQaXRTwFQ7\nwXvvjal6mqIoCqMm41GvoduMiVldzJEgr7hJjDGIoggAMDY2lvp8dHQ0dayvry91LAxDeu1ShoeH\nRd9l950zZ47ovJju7m6Mjo7ScmQy6aYeGhpKHWN1zeVyqWMsRpndl7VxPp9PHavUnnG92PfivkzC\n6sD6oaenJ3Usm82mju3bt0903+7u7tSxSuRyOYyPj9PPWD+zfmD1Yn3Nysuux+rP+prdN3nenDlz\nUCwWRddiBEH6ZY+1CasXuwdrE1Y+dr3e3t6K15FQ1/IS59wmALOttcdaazMArgawpp5rKoqiNJqq\n5tFaeyaAOwEcCyBvrb0BwEMAfu+cux/AnwH47uTpdzvnXql2zfjXgll09otWKBREx9iMg12vq6tL\n9F02k2D3Tc5gwjCkvzpstsXKJp35sV9cNkNgx1hdWV8k7xFFES0vmzGyX3RWXlZXNsNi95X2NSsf\nK0spbHbIvsdmr6yv2YyZtRMbX6wsbOZT2iYjI2lpnY19Vi9WDtY3AwMDovOkM2RWvv3791e8n4Sq\nhs45tx7AxRU+fwrA8pruriiK0gI0MkJRlI5HDZ2iKB2PGjpFUTqeRq+jE8FE/hgmjDJxkwnZTPBl\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9dc966050>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Y_predict = model_5.predict(X_test_5)\n",
    "# Y_predict = scaler.inverse_transform(Y_predict)\n",
    "Y_predict = Y_predict + 0.5\n",
    "# print X_test_5.shape,len(X_test_5[:,0,0,0])\n",
    "a = np.random.randint(len(X_test_5[:,0,0,0]))\n",
    "visualize_prediction(X_test_5[a],Y_predict[a])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mPOIvCSSneq4",
    "colab_type": "text"
   },
   "source": [
    ""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "HAnAGipnneq4",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "izkqzDNCneq5",
    "colab_type": "text"
   },
   "source": [
    "# 6 Bonus Question\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modify the function definitions to generate pairs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "VWEa1df-neq5",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_pair_drawing(figsize, U, V, noise=0.0):\n",
    "    fig = plt.figure(figsize=(figsize,figsize))\n",
    "    ax = plt.subplot(111)  # subplot(nrows, ncols, index, **kwargs)\n",
    "    plt.axis('Off')\n",
    "    ax.set_xlim(0,figsize)    # the order of the axe: from 0 to figsize\n",
    "    ax.set_ylim(0,figsize)\n",
    "    ax.fill(U, V, \"k\")\n",
    "    fig.canvas.draw()     \n",
    "    imdata = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)[::3].astype(np.float32)\n",
    "    imdata = imdata + noise * np.random.random(imdata.size)   # noise = 0.0 ?\n",
    "    plt.close(fig)\n",
    "    \n",
    "    return imdata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "OlD2m89Oneq6",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_pair_triangle(noise=0.0, free_location=False):\n",
    "    figsize = 1.0\n",
    "    if free_location:\n",
    "        U = np.random.random(3)\n",
    "        V = np.random.random(3)\n",
    "    else:\n",
    "        size = (0.3 + 0.7 * np.random.random())*figsize/2\n",
    "        middle = figsize/2\n",
    "        U = (middle, middle+size, middle-size)\n",
    "        V = (middle+size, middle-size, middle-size)\n",
    "    imdata = generate_pair_drawing(figsize, U, V, noise),generate_pair_drawing(figsize,U,V,0)\n",
    "    return imdata\n",
    "      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "8dVnGgNZneq7",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_pair_rectangle(noise=0, free_location=False):\n",
    "    figsize = 1.0    \n",
    "    U = np.zeros(4)\n",
    "    V = np.zeros(4)\n",
    "    if free_location:\n",
    "        corners = np.random.random(4)\n",
    "        top = max(corners[0], corners[1])\n",
    "        bottom = min(corners[0], corners[1])\n",
    "        left = min(corners[2], corners[3])\n",
    "        right = max(corners[2], corners[3])\n",
    "    else:\n",
    "        side = (0.3 + 0.7 * np.random.random()) * figsize\n",
    "        top = figsize/2 + side/2\n",
    "        bottom = figsize/2 - side/2\n",
    "        left = bottom\n",
    "        right = top\n",
    "    U[0] = U[1] = top\n",
    "    U[2] = U[3] = bottom\n",
    "    V[0] = V[3] = left\n",
    "    V[1] = V[2] = right\n",
    "    return generate_pair_drawing(figsize, U, V,noise),generate_pair_drawing(figsize,U,V,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "fWf9SME8neq8",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def generate_pair_disk(noise=0.0, free_location=False):\n",
    "    figsize = 1.0\n",
    "    if free_location:\n",
    "        center = np.random.random(2)\n",
    "    else:\n",
    "        center = (figsize/2, figsize/2)\n",
    "    radius = (0.3 + 0.7 * np.random.random()) * figsize/2\n",
    "    N = 50\n",
    "    U = np.zeros(N)\n",
    "    V = np.zeros(N)\n",
    "    i = 0\n",
    "    for t in np.linspace(0, 2*np.pi, N):\n",
    "        U[i] = center[0] + np.cos(t) * radius\n",
    "        V[i] = center[1] + np.sin(t) * radius\n",
    "        i = i + 1\n",
    "    return generate_pair_drawing(figsize, U, V, noise),generate_pair_drawing(figsize, U, V, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "_noPNynuneq9",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    ""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "dkKs2MuznerI",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "def generate_pairs_dataset_regression(nb_samples, noise):\n",
    "    # Getting im_size:\n",
    "    im_size = generate_a_triangle()[0].shape[0]\n",
    "    X = np.zeros([nb_samples,im_size])\n",
    "    NX = np.zeros([nb_samples,im_size])\n",
    "    # Y = np.zeros([nb_samples, 6])\n",
    "    # NY = np.zeros([nb_samples, 6])\n",
    "    print('Creating data:')\n",
    "    for i in range(nb_samples):\n",
    "        if i % 10 == 0:\n",
    "            print(i)\n",
    "        category = np.random.randint(3)\n",
    "        if category == 0:\n",
    "            [NX[i],X[i]] = generate_pair_rectangle(noise, False)\n",
    "        elif category == 1:\n",
    "            [NX[i],X[i]] = generate_pair_disk(noise, False) \n",
    "        else :\n",
    "            [NX[i],X[i]] = generate_pair_triangle(noise, False)  \n",
    "    NX = (NX + noise) / (255 + 2 * noise)\n",
    "    X = X/255 \n",
    "    return [NX,X]\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate training set using 600 simples with 50 as noise amplititude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "id": "jgB5WwWdnerJ",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 53.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 1054.0
    },
    "collapsed": true,
    "outputId": "e68e3f90-89e7-4b36-bb53-f781ddc3c500",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123422775E12,
     "user_tz": -60.0,
     "elapsed": 46124.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating data:\n",
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n",
      "100\n",
      "110\n",
      "120\n",
      "130\n",
      "140\n",
      "150\n",
      "160\n",
      "170\n",
      "180\n",
      "190\n",
      "200\n",
      "210\n",
      "220\n",
      "230\n",
      "240\n",
      "250\n",
      "260\n",
      "270\n",
      "280\n",
      "290\n",
      "300\n",
      "310\n",
      "320\n",
      "330\n",
      "340\n",
      "350\n",
      "360\n",
      "370\n",
      "380\n",
      "390\n",
      "400\n",
      "410\n",
      "420\n",
      "430\n",
      "440\n",
      "450\n",
      "460\n",
      "470\n",
      "480\n",
      "490\n",
      "500\n",
      "510\n",
      "520\n",
      "530\n",
      "540\n",
      "550\n",
      "560\n",
      "570\n",
      "580\n",
      "590\n"
     ]
    }
   ],
   "source": [
    "[NX,X]= generate_pairs_dataset_regression(600,50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the pairs "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "hWTLMywVnerM",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "X = X.reshape(-1,72,72,1)\n",
    "NX = NX.reshape(-1,72,72,1)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the pairs "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "id": "Ju1sOQbAnerN",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "7aad4bee-98e0-4b5b-fda3-0ddfffd0777e",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123437654E12,
     "user_tz": -60.0,
     "elapsed": 610.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9c7039f50>"
      ]
     },
     "execution_count": 105,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9dcbd8350>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(X[0].reshape(72,72), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "id": "ULeLed3hnerP",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "753bc6ba-cb22-460c-d387-78b706fb5653",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123439244E12,
     "user_tz": -60.0,
     "elapsed": 673.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9c6fb5a10>"
      ]
     },
     "execution_count": 106,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD7CAYAAABDsImYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3XusXtd53/mfRIk3UaR4kXUxb6Il\nblKwgYxrG44dN/KkncRTB8Y0mQkwQeo2LpIp0iKDmaJTtJ3W0w7QmRSZFL2gzaBFUycYoJc/Whue\nThMbRd2B3LFdxI2bHG3RulBiqAsvoihaFC/imT8O96vP3j7P4SElH4t61w8QtLnP3muv237393nW\ns9a6ZXFxMU1NTe9s3fr9zkBTU9P3Xu1Fb2qaA7UXvalpDtRe9KamOVB70Zua5kDtRW9qmgPddqM3\ndl33K0k+nGQxyS/2ff/1tyxXTU1Nb6lu6Ivedd0PJ3mo7/sfTPKZJH/rLc1VU1PTW6ob/aL/SJJ/\nkSR93y90Xbe967qtfd+fXe7iI0eOLCbJ3r17c+XKldn5W265ZXZ87Nix2fHmzZtnx1u3bp0d//7v\n//6y19x+++2z4x07dix7/uWXX54dnz59enZ84MCB2fHCwsLseMOGDbPjW2994/dw06ZNs+Ndu3ZF\nnT9/fna8bt26bNiwIRcuXBjd/+STTy777Ntue6MpTMfnPf3008vmad++fbNj6/H1119f9vp3vetd\ns+Nnn3122XQMpPKa++67b3ZsGzz//PNJkrvvvnvUxubHPOzfv392/NRTTy2bZ9vS9li3bt2y12/Z\nsmV2fOHChWXLcvbsuIt6/7lz52bHu3fvnh2/9NJLs+M77rhjdvz8889n//79efrpp0d5ss/eeeed\ns2PrwjxZTtvedKzTixcvzo7tg+vWrXvjhZroRm30e5Oc4N8nrp5bUTbWPMiOPS/yx3UedLP06Vtu\nJAS267r/M8kX+77/l1f//f8m+dm+7x9f7voLFy4s3iwV0tR0E6v8ot8ouh/P+At+f5LnqosvXLiQ\nCxcuZOvWrXnmmWdm50UQUe748eOzY9FH5Pa86dx77xvZeu2115ZNU5PhPe95z7LXiHT333//7Fh8\nFmOT5Dvf+c7s+NVXX80DDzyQp556Ku9+97tn50X0U6dOzY5FynvuuWfZPB08eHB2bJmtUxFSWS+a\n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\nddT61YOth3jA4w0bNozqS3NDjPe54rcYa340N2wng0eqhUEtyzTwxvh226OasmzdnTlzJlu2bMmZ\nM2dGZasCfeyPyjp15MM+a97M85EjR2bHU7NEXfNF77ruM0l+hlMfyNIWTX8vyWKS3+n7/k9dK52m\npqbvn1azgcM/7Pv+kb7vH8nSxg3/OMnfTPKLfd9/NMm2rus+8b3NZlNT05vR9aL7X07yJ5J8pe/7\nr189N2yb/K+qm/Q2ilpirF5YUcYACrFOD7F4W60Y47PEWINkqqmZpiM2TuPHNTlMV7PEZ+jlt8zV\ngpjWoyMKXiPiaeporugVr7y51qnnrTvzMKD1wYMHR/Ulxlsu05yujz/IdDT5rAeR3pEY+4omhlg9\nTVf8Nt8+w2cP12/atKnsm8rzjr5U531XNCXtN/azlbTqyLiu6z6Y5BeS/IUkX+z7/j+7ev5Hknym\n7/v/trr3ypUri9Mosqamprdcb2o31UF/MsmvXU/ig4av1aZNm0a/utUXvQpfrH413SHFMXK/dNUa\naDqaqi+6z9KxMx1Ht2z+0ponn+GXbBo+O0inlY4dKcFy+kVwF5Lqi+4PsF9ZHah+3U1zuXXZDh48\nOFqEwS+j9WVZqhlYOiglD+vEL91qvujTcWfLrzNLWrO+dPht2rRpFgLr81yOWeeozjjbuPqiV0t3\nWxemudKY+vW86I9kaYPFxSQ7OX/NbZOHhnzwwQdHL64Zq9b81vPove5S6UvpNdKKGOR582A6VnK1\nvraNMv3b8ePHc//99+f48eOjxvAFrbaK9ti8Vp5kO4p5cEqw+Gln1TPvVkLVYoTWo7JDV/TmKIXp\nGJxjfqy3asqtZam2Pa48+ck4AMofOkdKzKsv/WAmbdiwYZQ/fzDsU9Uo0HLmQDJub/uNHwV/JG2/\nqVbF013X3Z/kXN/3F/u+v5Tksa7rfujqn/9orrFtclNT0/dXq/2i35fkRf793yf51a7rbk3y//V9\n/6W3PGdNTU1vmdZkmmpTU9P3V80V3tQ0B2ovelPTHKi96E1Nc6D2ojc1zYHai97UNAdqL3pT0xxo\nTeajJ0nXdb+S5MNZiqz7RSbFvGPUdd0vJflYlur1ryf5epJfT7IuyXNJfqbv+wt1Cjefuq7blOQ/\nJflrSb6cd355fzrJn0tyOUuTvH4nN0GZ1+SL3nXdDyd5qO/7H0zymSR/ay2eu5bquu7jSd57tYw/\nlqWpvH81yd/t+/5jSb6d5Ge/j1n8XukvJRliNd/R5e26bmeWpmr/UJJPJvlUbpIyrxW6/0iSf5Ek\nfd8vJNnedd3WlW+56fSVJP/11eMzSe7I0vyAz189N0znfceo67pDSR5O8sWrpx7JO7i8WSrPl/q+\nf6Xv++f6vv+53CRlXit0vzfJf+DfJ66eW37i7k2ovu9fTzKsifSZJP93kh8F417MUijxO0m/nORP\nJ/n01X/f8Q4v7/4km7uu+3yS7Uk+m5ukzN8vZ9w1p7berOq67lNZetH/9ORP76gyd133x5J8te/7\np4pL3lHlvapbsjRz848m+eNJ/lHG5XzblnmtXvTjWfqCD7o/S46Ld5S6rvvRJH8xySf6vn85ybmr\nzqpkFdN5bzL9kSSf6rru32dprYL/Oe/s8ibJC0ke7fv+ct/3TyR5JckrN0OZ1+pF/80kP5kkXde9\nP8nxvu9fWfmWm0td121L8jeSfLLv+8E59aUkP3H1+CfyDprO2/f9T/V9/8G+7z+c5B9kyev+ji3v\nVf1mkv+867pbrzrmtuQmKfOazV7ruu5/S/IHk1xJ8gt93//HNXnwGqnrup/Lks32OKc/naWXYGOS\no0n+xNX5/O8odV332SRPJ/nXST6Xd3B5u677+SyZZknyv2ZpCPVtX+Y2TbWpaQ7UIuOamuZA7UVv\napoDtRe9qWkO1F70pqY5UHvRm5rmQO1Fb2qaA7UXvalpDtRe9KamOdD/D58P5M5mkNJvAAAAAElF\nTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9c70190d0>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(NX[0].reshape(72,72), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "ROThCX7jnerR",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "from keras.layers import Reshape\n",
    "from keras.layers import UpSampling2D, Conv2DTranspose, Conv2D, Dropout, Input, Lambda,concatenate,Cropping2D,ZeroPadding2D\n",
    "from keras.models import Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "6ThRuTrXnerS",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "def get_crop_shape(target, refer):\n",
    "\n",
    "  cw = (target.get_shape()[2] - refer.get_shape()[2]).value\n",
    "  assert (cw >= 0)\n",
    "  if cw % 2 != 0:\n",
    "    cw1, cw2 = int(cw/2), int(cw/2) + 1\n",
    "  else:\n",
    "    cw1, cw2 = int(cw/2), int(cw/2)\n",
    "  ch = (target.get_shape()[1] - refer.get_shape()[1]).value\n",
    "  assert (ch >= 0)\n",
    "  if ch % 2 != 0:\n",
    "      ch1, ch2 = int(ch/2), int(ch/2) + 1\n",
    "  else:\n",
    "      ch1, ch2 = int(ch/2), int(ch/2)\n",
    "  return (ch1, ch2), (cw1, cw2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "V6z2guQFnerS",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "source": [
    "Model : 5 convolution layers for encoding; 5 layers for decoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "RWd5Q8jwnerT",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "concat_axis = 3 \n",
    "inputs = Input((72, 72, 1))\n",
    "# S = Lambda(lambda x: x/255)(inputs)\n",
    "\n",
    "c1 = Conv2D(16, (3,3), activation='elu',kernel_initializer = 'he_normal',padding='same')(inputs)\n",
    "c1 = Dropout(0.1)(c1)\n",
    "c1 = Conv2D(16, (3,3), activation='elu',kernel_initializer = 'he_normal',padding='same')(c1)\n",
    "p1 = MaxPooling2D((2, 2)) (c1)\n",
    "\n",
    "\n",
    "c2 = Conv2D(32, (3,3), activation='elu',kernel_initializer= 'he_normal',padding='same')(p1)\n",
    "c2 = Dropout(0.1)(c2)\n",
    "c2 = Conv2D(32, (3,3), activation='elu',kernel_initializer= 'he_normal',padding='same')(c2)\n",
    "p2 = MaxPooling2D((2, 2)) (c2)\n",
    "\n",
    "c3  = Conv2D(64, (3,3), activation='elu',kernel_initializer= 'he_normal', padding=\"same\")(p2)\n",
    "c3 = Dropout(0.2)(c3)\n",
    "c3 = Conv2D(64, (3,3), activation='elu',kernel_initializer= 'he_normal', padding=\"same\")(c3)\n",
    "p3 = MaxPooling2D((2,2))(c3)\n",
    "\n",
    "c4 = Conv2D(128, (3,3), activation='elu',kernel_initializer= 'he_normal', padding='same')(p3)\n",
    "c4 = Dropout(0.2)(c4)\n",
    "c4 = Conv2D(128, (3,3), activation='elu',kernel_initializer= 'he_normal', padding='same')(c4)\n",
    "p4 = MaxPooling2D((2,2))(c4)\n",
    "\n",
    "c5 = Conv2D(256, (3,3), activation='elu',kernel_initializer= 'he_normal', padding='same')(p4)\n",
    "c5 = Dropout(0.3)(c5)\n",
    "c5 = Conv2D(256, (3,3), activation='elu',kernel_initializer= 'he_normal', padding='same')(c5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "id": "urj7AKDJnerU",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "up_conv5 = UpSampling2D(size=(2, 2))(c5)\n",
    "ch, cw = get_crop_shape(c4, up_conv5)\n",
    "crop_conv4 = Cropping2D(cropping=(ch,cw))(c4) \n",
    "\n",
    "up6 = concatenate([up_conv5, crop_conv4], axis=concat_axis) \n",
    "conv6 = Conv2D(256, (3, 3), padding=\"same\", activation=\"sigmoid\", data_format=\"channels_last\")(up6)\n",
    "up_conv6 = UpSampling2D(size=(2, 2), data_format=\"channels_last\")(conv6)\n",
    "ch, cw = get_crop_shape(c3, up_conv6)\n",
    "crop_conv3 = Cropping2D(cropping=(ch,cw), data_format=\"channels_last\")(c3)\n",
    "\n",
    "up7  = concatenate([up_conv6, crop_conv3], axis=concat_axis)\n",
    "conv7 = Conv2D(128, (3, 3), padding=\"same\", activation=\"sigmoid\", data_format=\"channels_last\")(up7)\n",
    "up_conv7 = UpSampling2D(size=(2, 2), data_format=\"channels_last\")(conv7)\n",
    "ch, cw = get_crop_shape(c2, up_conv7)\n",
    "crop_conv2 = Cropping2D(cropping=(ch,cw), data_format=\"channels_last\")(c2)\n",
    "    \n",
    "up8   = concatenate([up_conv7, crop_conv2], axis=concat_axis)\n",
    "conv8 = Conv2D(64, (3, 3), padding=\"same\", activation=\"sigmoid\", data_format=\"channels_last\")(up8)\n",
    "up_conv8 = UpSampling2D(size=(2, 2))(conv8)\n",
    "ch, cw = get_crop_shape(c1, up_conv8)\n",
    "crop_conv1 = Cropping2D(cropping=(ch,cw))(c1)\n",
    "\n",
    "up9 = concatenate([up_conv8, crop_conv1], axis=concat_axis)\n",
    "conv9 = Conv2D(32, (3, 3), activation='sigmoid', padding='same')(up9)\n",
    "ch, cw = get_crop_shape(inputs, conv9)\n",
    "conv9 = ZeroPadding2D(padding=((ch[0], ch[1]), (cw[0], cw[1])))(conv9)\n",
    "# conv10 = Conv2D(1, (1, 1))(conv9) \n",
    "\n",
    "\n",
    "outputs = Conv2D(1, (1,1))(conv9)   #, activation='sigmoid'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "id": "exJxeG6lnerU",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 71.0
    },
    "collapsed": true,
    "outputId": "806f8c7f-87d2-4b7e-d690-543f2c91d6b7",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123458173E12,
     "user_tz": -60.0,
     "elapsed": 618.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python2.7/dist-packages/ipykernel_launcher.py:1: UserWarning: Update your `Model` call to the Keras 2 API: `Model(outputs=Tensor(\"co..., inputs=Tensor(\"in...)`\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "model_6 = Model(input=inputs, output=outputs)  \n",
    "model_6.compile(loss='mean_squared_error',optimizer='rmsprop', metrics=['accuracy'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "id": "bDdDX_ornerW",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 56.0
      },
      {
       "item_id": 71.0
      },
      {
       "item_id": 72.0
      },
      {
       "item_id": 73.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 714.0
    },
    "outputId": "0e585364-93dc-492d-f210-95e656b9830a",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.51812350645E12,
     "user_tz": -60.0,
     "elapsed": 45140.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    },
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "600/600 [==============================] - 3s 4ms/step - loss: 0.4251 - acc: 0.5789\n",
      "Epoch 2/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.2402 - acc: 0.7734\n",
      "Epoch 3/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.2176 - acc: 0.7846\n",
      "Epoch 4/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.2080 - acc: 0.7875\n",
      "Epoch 5/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1973 - acc: 0.7888\n",
      "Epoch 6/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1885 - acc: 0.7895\n",
      "Epoch 7/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1822 - acc: 0.7895\n",
      "Epoch 8/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1733 - acc: 0.7899\n",
      "Epoch 9/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1661 - acc: 0.7900\n",
      "Epoch 10/20\n",
      "512/600 [========================>.....] - ETA: 0s - loss: 0.1600 - acc: 0.7900"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1591 - acc: 0.7900\n",
      "Epoch 11/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1525 - acc: 0.7900\n",
      "Epoch 12/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1454 - acc: 0.7900\n",
      "Epoch 13/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1397 - acc: 0.7901\n",
      "Epoch 14/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1333 - acc: 0.7900\n",
      "Epoch 15/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1266 - acc: 0.7901\n",
      "Epoch 16/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1213 - acc: 0.7901\n",
      "Epoch 17/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1154 - acc: 0.7901\n",
      "Epoch 18/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.1098 - acc: 0.7901\n",
      "Epoch 19/20\n",
      "576/600 [===========================>..] - ETA: 0s - loss: 0.1043 - acc: 0.7901"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r600/600 [==============================] - 2s 4ms/step - loss: 0.1042 - acc: 0.7901\n",
      "Epoch 20/20\n",
      "600/600 [==============================] - 2s 4ms/step - loss: 0.0988 - acc: 0.7901\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7ff9c6f88890>"
      ]
     },
     "execution_count": 112,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_6.fit(NX,X,epochs=20, batch_size=32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "id": "yNj8rbXYnera",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 8.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 204.0
    },
    "outputId": "18265263-0ab2-4f04-b374-d0d252626a36",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123786023E12,
     "user_tz": -60.0,
     "elapsed": 9538.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creating data:\n",
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n"
     ]
    }
   ],
   "source": [
    "[NX_test,X_test] = generate_pairs_dataset_regression(100,50)\n",
    "NX_test = NX_test.reshape(-1,72,72,1)\n",
    "X_test = X_test.reshape(-1,72,72,1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model evaluation : 79%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "id": "CSY9wY3Xnerc",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 51.0
    },
    "outputId": "bbc1edaf-a98f-47de-a272-b9afa74b1246",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.51812378979E12,
     "user_tz": -60.0,
     "elapsed": 783.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100/100 [==============================] - 0s 2ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.09485691726207733, 0.7901002883911132]"
      ]
     },
     "execution_count": 114,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "model_6.evaluate(NX_test,X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "visualise the prediction: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "id": "Oz09ZXCZnere",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "14560985-0232-450c-d905-1c27e7709466",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123792078E12,
     "user_tz": -60.0,
     "elapsed": 1071.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9e0008690>"
      ]
     },
     "execution_count": 115,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n76EqRJnvQvLpt501n99XoWZs3LixkhrbpcN2auhExHiPFT0Q6ABiogcCHUBPUnfn6+6Oo7q0N/ff\nf3/j/S72OymqS09EGkhLsFS1GBcUbPr06Ta9E33LWYejpqR1PF5LhxDXHqolVA3o6MFxoXXZBcfk\ne2KbeQ/Lp/pAyz/rcuPAe+j849JCUcXiu6yPrQuCyfp4T9MuzaxZs2xKqk984hOlfMcdd5Qy1R7S\n+6DugUBg1IiJHgh0AD1J3V3WVFJF0kDneMJnaS2l04qzrpKikQa61DtSczzv/v7+Sh2krHRQoaWa\noFpCazn7T7rHsWB7XJQVjgvLZ98YT54+9s63nDSWDi1sD+m0y4zLMvnu+SxBGs92cgzpty55JywX\nyJLqYzGmM2fOtKoex5RwfR4v7HOip5RmSfqqpPmSZkr6rKT7FNlUA4FJgzbU/R2S1uSc3yzpP0r6\nb4psqoHApEKbuO5/i3+eJOlxjXM2VRcLu02gSOf0QjpFKzKtn6TYtOyyPc7BRqrS1KK+6dOn27qp\nHpBOs1zSe9JDjgvVFZbDvpFCOmcb0njSb/bfWdd5P6kurdd0KnFWce5KuGPJLkIOn6VaMdIxUKpS\n7D/bxHtomS/Gcfr06RWqz7Hm+6b64dJTjReNb51NNaV0j6QTJV0g6a7IphoI9BwOPJtqzvnclNK/\nkvT1WoETlk21zYr+8MMPl/J73/veUnb731yFaaihMYeGrJFWdJ6W6+/v1/r163XSSSdV6qbRzcXA\ncyu6i3XHNjm2wtWKq4lLWMi9YK6avJ+rW7Gib9q0qbJycx/9Va96VWP7uXoyZPPatWsb63IrOhct\nl3iTDKPeH/af7XYrel9fnx599FEtWrSownS4op933nmlzGynrJcMiO9yyZIl2h8cUDbVlNIfStqc\nc16fc/5/KaXpkraPZzZVgoPAD5STgZN+2bJlpeyOPBKc3M4y7YI4snyp+qHRIsujpuwDqSavsz6X\nwok/VvSBJ4VscuCRqmoJ+8yx5g8Mx8IFjeSPGT9i1wb2ywV45KSncxFTLBEcN+d0VPd157izHXye\nP85Njj579+6tvA86MLndCO78cKFy0ZIOFG2McW+SdI0kpZTmS+pXZFMNBCYV2lD3r0j6q5TSP0s6\nXNJSSWskfS2yqQYCkwNtrO47JTUp1uOWTdXFwiacbkaaSTrFMh1dYzmkmU6/rR9TZVkFLSc9l6r6\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9c6213450>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_predict_6 = model_6.predict(NX_test)\n",
    "x = np.random.randint(len(X_predict_6[:,0,0,0]))\n",
    "plt.imshow(X_predict_6[x].reshape(72,72), cmap='gray')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Original pair:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "id": "w6adtJlGLFJ3",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "01a26a2a-5b15-41c7-9dc1-256e83858ba7",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123795703E12,
     "user_tz": -60.0,
     "elapsed": 1004.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9d0c7be50>"
      ]
     },
     "execution_count": 116,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nRK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9c71134d0>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(X_test[x].reshape(72,72), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "id": "-bQI37agLltk",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     },
     "output_extras": [
      {
       "item_id": 1.0
      },
      {
       "item_id": 2.0
      }
     ],
     "base_uri": "https://localhost:8080/",
     "height": 285.0
    },
    "outputId": "2037cb74-7a06-468b-b029-1ab2dc0d8917",
    "executionInfo": {
     "status": "ok",
     "timestamp": 1.518123798513E12,
     "user_tz": -60.0,
     "elapsed": 1176.0,
     "user": {
      "displayName": "Dandan KANG",
      "photoUrl": "//lh3.googleusercontent.com/-nJOpxTAHwYA/AAAAAAAAAAI/AAAAAAAAAA4/dG6FbVilaFA/s50-c-k-no/photo.jpg",
      "userId": "116686077267395976886"
     }
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7ff9ddd0ae50>"
      ]
     },
     "execution_count": 117,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPoAAAD7CAYAAABDsImYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3XusXtd53/kfSfFOUxRNiaKsC01J\n3KJjIKM2BuzUcdTJNElTD4xpMhOgQeppPEimSIsMZopOMe20nnaAzqTIpGin6CRo0dQJBugFSOsi\n03GgIJcO3MYXOPUl0pZ5kSiJutGULEoij3g588fhfv3ZW+9zeEhLx6Le9QMML73ce+1122d/n2c9\na60Ny8vLaWpqemdr43e6AE1NTW+92ove1LQAai96U9MCqL3oTU0LoPaiNzUtgNqL3tS0ALrpem/s\nuu4Xk3wwyXKSn+v7/vNvWqmampreVF3XF73ruu9Pcn/f9x9K8okkf+9NLVVTU9Obquv9ov9Akn+V\nJH3fP9J13S1d1+3u+/7leRc/9dRTy0myf//+HD9+fG6G73nPe2bpJ598cpY+cODALH3mzJlZevfu\n3bP0rl27Zumnn376qtdcunRp7vUGD5m++eabZ+mXX/5WFffs2TOqw5YtW2bpTZs2ZdeuXXnllVdG\n11y+fHmWvuWWW2bpxx57bJbesWNH5umOO+6YpV977bW5ZXr11Vdn6YsXL87SGzd+62+6+Xi95Xn8\n8cdHdRm0bdu2WXr79u2z9IYNG5KstPnXv/71ueXfvHnzLH3hwoVZev/+/bP03r17Z+lnn312lrZt\nLfP58+dnaceK9x46dGju9UnyzDPPzNKOC+9x3N1007demcuXL2fPnj156aWXRv2xtLQ0S9sHO3fu\nnKWt5+uvvz5LO07N03FkO1q2I0eObEih67XRb0/yAv/9wpXfVpUFXAT5giyKfBEWQTdKfTdcTwhs\n13W/nOQ3+r7/11f++/9L8lN93z827/oLFy4sL9pL3tT0HVD5Rb/eP0enMv6C35HkmeLaLC0tZWlp\nKbt27Roh8YsvvjhLi1S33XbbLC2+iI0V1onZTz311CwtMotlSrPi4MGDs/TZs2dnadHqhReEmm/h\na7KCgffcc0+eeOKJ3H77t5rKvMQ6zQDLap01M2699dZZWswW0W0X62M9rc9LL700S99zzz2z9MmT\nJ2dp+8a6DPh56NChEYqKlv6xf/e73z23/JotmgZbt26dWx77su/7Wdr2tE0cH1PZH6dPn55bVsfd\n/v37s3v37rz88ssj86kyz+wPTRf72DLYdpor991339x8zH+q60X330zyY0nSdd0fSXKq7/uzq9/S\n1NT0ndJ1veh93382yRe7rvtsVjzuP/umlqqpqelN1XV7Evq+/ytrvfYb3/hGkrwB3cW05557bpYW\nCfXIinj+rnddfBPZxJ3Kqy9maTLocNH7KaIlYzQd0PHd7373CKn0vIr6en/1yHpvZQKI5SKu6Kcn\n2HraB+fOnZtbN9vu0UcfnaXf9a53zdJ33nnnLG27m49Ir4fbdrD8Yqxmi/htf9i29p9lEHWnz7Pd\nNSVta9vi2Wefze7du/Pqq6+O8t23b98s7bjWHLJuJ06cmPv7XXfdNUuL975Da/V9tci4pqYFUHvR\nm5oWQNc1vXatev7555eTFY/t888/P/cacU9PsNhUBW7oCVV333333GvEWLHc/EVavdHincg5Late\ndzHV5/kMUVFvs2USQUVT7xVfRWVNHT24mj2aRpo0PtfyP/HEE5nqyJEj+eY3vzn7b9M+V+z3d/N3\nTOhFt/80Nxw3tokobZ7JONjI/vMe28gZi23btuWOO+7IqVOnRrMRg6majPtPk6mqg78r+1szwbFy\n8ODBNz1gpqmp6QZSe9GbmhZA6xK/V3kJxTHxRZwSm0Vd0waPiK5ikM9dS3BOFRuuF3wa021gxYBv\n58+fH6FfFbMt3otmmgoGcVRmjPhpefTser046XoD210TwHQVuOE1tqNtbX/73FOnTs0tvyafiK6X\nWty2/ParbZiMzS/NG2csrIOzC4NZsnnz5lE+lsPn2S6W28CrymytAn0cQ6upfdGbmhZA7UVvaloA\nrYvXfWlpaTlZCU44evTo7HcDQKolomKNGKs3Vxw2gEK0FMUMkhDxxCnNgQpjV4st3rVr12wJo15Y\nvc3iq95Tn1F55jVFqqWjlcmkaSQSm4+4axlsO+s13Hvw4MFR3yjby2tsh8qEee973ztL2w72t2lR\nWvNkisCut7DdnWmwztNlyvv3789zzz03andxXRT3GgOkNA0da7ZXFYRjfXbs2NG87k1Ni6z2ojc1\nLYDWBd2HHWbuvPPOEaYZxCJa6oU1tlqPujjmvWKN+CnKiVAimvmLdGKj3uspuk/R+r777svRo0dH\nsegGmRjQ45Jar69Q1jpbN9u3WgZsfbzXtrMtqjUJBrcMHvWNGzeO6mLgjdgrDlsvTSyxtzJPXLLq\nLItIax01nabyeearZ9v48x07dmTjxo25fPnyqM7OLijNJM1E29F6aj66A5GzVY6PO+64o6F7U9Mi\nq73oTU0LoHUJmBE1XG4oHlaxz95rkIgeVvGlQk5R33hl8dkABYNc9C7fe++9s7QomozRccDFDRs2\njK7Te6ppYT0tnwhqOZyB8F7rPC3fIANAvEZPuPnbLt6r+TB4mm+77bYyaKnyrleBSmKsZdMkcYcZ\nPdYVok+Xqeoht6yaj84U+YzNmzdn69atuXDhwgj7q91jLFM1g6Ip6ZJrx361i9Jqal/0pqYFUHvR\nm5oWQOuC7noYRZwqftflkqJytQmimOmz9IqLh6KSuCY26akVjQ3g0SuazF8aedddd428rZocDzzw\nwCwt7omH/q4317YTa53JEBWr3VeqHVbE7GqjRMtWBRgZP17ttGOePtd6eY2mnXjrs5wd0AzTdJyW\nw3ra59U++OfPn8/WrVtz/vz5UZs6k1XF5Wu6aM5Zf8egnvlqv/7V1L7oTU0LoPaiNzUtgNYF3Qdc\n3bNnT7lXd7XHuRioB1PkFoPEVYMe9K57r7hWlUEvr+U/duxYlIi4tLSULVu2ZGlpaYRXesW9Xy+v\npoUYqGkgylnWD37wg7O0sduaD/5umW07TYBqI0cDb4a6XLx4MR/5yEfmllnU/+pXvzpLOw40AbzX\nGYdqs0bjx0XyKj2VbarZYHs5e/Pss8/m5ptvzksvvVTuBORYs9yu8/AaTTvHiuPAelqe1bSmF73r\nuvcn+ddJfrHv+/+z67q7kvxqkk1ZObjhJ/u+n78HTlNT03dcV0X3rut2Jvn7SX6Ln/9mkn/Q9/33\nJTma5KfemuI1NTW9GVrLF30pyY8k+R/57aEk/+2V9L9J8peS/MMqAz2S1bJIY8Dvv//+WdqAjirw\nRInr5r+WTQTFLz3clk1TYnrAnug/4OjWrVtHaKrX191KbCM96pb7u77ru+ZeY7uI1pUXucJpy6mX\n23ppurjDTrX8tjKBnHEwftzgFPfft8/Ee+vurIH3ir1TL7WIbh3sD00Xx+9gYm3evPkNe/wPcgw6\nXozpF+Mr771l09yqTt6d6qovet/3F5Nc7LrOn3eC6s8nOfCGG5uamt42WvPqta7rPpnk9BUb/fm+\n72+78vt9ST7V9/33VvcuLS0t+7Voamp6S/Smn6b6Std12/u+P5fkPVk5XbXUgCkHDhwYodJ0X/RB\n4phYIx4Z4yvWiNbmL4obTCHuqXlx68kYmc1nWo5t27Zl165deeWVV0aeXuPY9VpXswIiqxID9Uj7\nrCq23DqL0yKhXnfNJD2+IvdgAjz99NPlji7m6fJV89RMqAJpqr3Yna0wsMn2nJ5Zb93EcpHYMajO\nnz+f7du359y5cyNzyDprQlTHKlk3y+eY0KSxnpoxq2H89c6jP5zkR6+kfzTJ/3ud+TQ1Na2DrvpF\n77rujyb5hSQHk1zouu7HkvxEkl/puu5nkjyR5J++lYVsamr69rQuO8ycOHFiOVlBVfFIbFSikugq\ngum1rGKcxRrxULSqNgQUbzUTquOSkjH6bt68OTfddFMuXrw4Quv3v//9s7S/e9Km8dTWUzSr9ocX\nIfXqi7L2uW2kWSVmGsRhu4jQgynx4osvjp4rWuuB1xxyJsJrqlmDKqDq93//92fpakPL6Xiv4skr\nU8E+vvXWW7N58+ZcuHBh1Eb2h2Oqqr9j01mBaq94y6O5uGfPnrbDTFPTIqu96E1NC6B1QfeXX355\nOVnBHr2/1XFL1YaIoo9IJOKJXHpwNQd8rp5d86mWcpqeHkIvTm/fvn2GdXrC9Tb7PO/VJNBUqGLm\nxXuRu1qOa/6aOlW8vYEx5j/PY/3aa6/lyJEjs98rj7L1FUV9rkirCSeuav6Iuvb91772tVnaJadD\neQfZRtW48/dXX301d91118iznoz7zPo47nzW4cOHZ2mXYqu1nDZ8zz33NHRvalpktRe9qWkBtC7L\nVMUXkaqK0RbLRRa9s3rO9XKKtKKSqtBPD7zBIFWggybGtD779+/PuXPn3mCuiGx6sCu0FnENthGb\nNQ1EuWp/cU0G95DXM28fOKthXcR++1X8tE1FVJHZmQKfK2brEbd9NDcMyHEW40Mf+tAs/ZWvfCXK\nWQfXSdi+VaDP0F6vvfbaqBzWTfPD2QhNGq+vzE3fIdvUsbma2he9qWkB1F70pqYF0Lp43b/5zW8u\nJyu47RFLIpioLL5U+4KLUKKP6Frtm27+ok+1bFbkrPacT954+uXJkydz9913l7uVqGrpoR51MbPa\nRFFTxxkFy1btgKIZY/6uXDQwRJwe8PuZZ54ZYa9YbtspMds+0EzQbHPMarbYVo4t936frq/wGZ/5\n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\nQ1xtsqi3P5mPvpcvXx6ZClU8uXhvvraF8du2ReVV1hvvvV7vslbzrHa/qRBSE0gErs7F83RbZx9E\nZpd+6qUWb+1vy2l7OlbE8GRsxll/A1H04Dteht83bdpUHhPlOLIcziKYvyaKOxZ5dkHVf6tpzdNr\nXdd9NsmdST6a5OFrOU11aWlpuZomampqetP07Z+m2vf993Zd958k+bVJhlc9TXX4Uh4+fHj0Raz2\nFhsV8Bq/6H59/eL4NfFe/4Ku5Yu+2h5dzpPu3LkzZ86cyd69e0dfo2qPM51r1RfdFXi2hX9E/VL4\nRXde2DrYLubpl7s6yG/eiq3Tp0+X23K7WYZt6hfda/yiWRfL6ZfUdnOc2d9TZ1z1Ra/2zPOLvm3b\ntpw8eTJ33333iCAqp+DnPve5WVrCcuxXZ7Rbf/u4Oo1nqrU44/5okuf7vn+y7/s/6LrupiRnr+U0\nVTteghAzvcYOE9+8xg4TA/UW2zjV8tIqWMMXz5kCB5YvQzLugCGvm2++eeSdrvYLt87+4bIjHQQG\njfgHU/S1bpbNl8nf9QT7AlgeTS//UIno3uuLbtv5YjhA7Sd3HbIN7W/NQsdT9Ydt6pn230xXS23V\ncM3Zs2dHda72yne8iOL2vSaQf8Ads1VQ1GpaizPuI0n+hyTpum5/kl1pp6k2Nd1QWgu6/19J/nHX\ndf8uyfYkP5vkC0k+1U5TbWq6MbQWr/u5JH9mzj+t+TRVbZAqKKNakqgtI/aKL1UctLaSGGTaYA1x\n3d9FVO296ZLHeRskbt26dVQ+kVC8FEer2GdtYsthW4jryjJU9ne1xqAKtlG2qaaOWOpuOZoP+kbE\nZHFdmY+mimNFNHbceG8yNu+qoBdNI73cwzNuv/320b3VkUluGunv4rf1sT+83rFSBZdN1UJgm5oW\nQO1Fb2paAK1LrLsSRUUqcU+crHakEbNNi6h6YUVOrxGVLJtTG3q75x3JM6+sw7Tdhg0bRhsbimPi\nYaXqdFRx1zpYbmcpfK55VksqNTE0saqpP6/3d+/V3NB8EIf13ttu1cyHdRGZnUGwHTTtknrz0Sro\nxXIM6bNnz5bLjMVszQZRfDplN0iTQVPEjSKrqc+p2he9qWkB1F70pqYF0LqgexVNJhKJolVctkED\nU4/3IPFeJBTf9HL6LKOYfK5YVnmXk3Gwx4DxL7zwwsi7Lu5XS2pVFUkn4pkWdyvvdLWPuh5o21pc\n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\ntHv37pFnU4wSRfVyimnit1gn0otZortHQVU7nYji7uAi+pn/1BwQzQaMvPXWW8sgE6/X5BAh3cjR\n623HajcYvf166cVVPf/WR6+zpoeedlFc08DgJE0j87c/RH3z8VnisPlUZptIX23ImYzHWnWKbRWg\nM+D6sWPHyg097W/LZ930ohvoo5ng8lXvdd/81bTWF/19Xdd9Oisns/wvaSeqNjXdULqqM67ruvck\n+XCSf57kUJLfTrKr7/u9V/79viSf6vv+e6s8Ll26tOxfuaamprdE1++M6/v+6ST/7Mp/Huu67tkk\nH7iWE1UHD+i+fftGCGbwifgtQhsb7+4u1bE3VYBGhWV6lz3CyT+AeppF4+nxwOLbnj178vzzz+e2\n224bmSgG7lgHPa+Wz8AP07aRMxC2qW0tfptPdQxVdXKryzHF3qG9nnrqqRHqVhiryeT11b75mk/i\nvRgv6mraOT6m6F4huuWuTr09ceJEduzYkddee23UHyK6406zz7R52geOzaoOllMzb6qrOuO6rvuJ\nruv+0pX07Un2J/knWTlJNWknqjY1ve21Fhv900n+767rPpZkS5I/n+RLST7Vdd3PJHki7UTVpqa3\ntdYlYOby5cvLycpEvzHOIqFeXj211dFIoo9eXtFPFBN9xDoRVe+vaa9Z7XRTvaHHjx/P66+/ni1b\ntoxw33q6j7zPsJ6WtcJ++9DyWR5nEZRlEDmr4A69/bb7EMRx5syZUXCL9dJ8qHZPMTBEiatePz3d\ndF7+Ir073iTjHY8MsqmW137pS1+apQ8cOJBNmzbl0qVLIzOu2i3IfnUWxBkIA4mmAVmDRH1nHdqR\nTE1NC672ojc1LYDWBd1PnTq1nKx4EQ3iEC1FEJHQYAcxTVSqYsM1DcRe6+y9opvPet/73nfVsiVj\nHLt06VKOHj2a++67b1Rn0VozozrJtDo+SgzUUztdOjvIoAyfK2YbPOOz9OZWXuohCOmZZ54Z9aVo\nbNtVZbb/RHSfW+3pb5tobojDYngy9mwrZ3sMSNLjv7y8nAceeCCPPvroaKzZduK3Zpttan18ruPA\nGRTz1JTasmVLQ/empkVWe9GbmhZA634kk6glKotEBo/odRd9zMd9tL3eawy+EAn1OotKou5XvvKV\nWdodYvSuJmNzYkDHJ598chTsoedZxK2W4Fpu7xV3ncmodvAxbax/tRmjaT3H9oF5ipzea5tY33lL\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff9d0c7fcd0>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(NX_test[x].reshape(72,72), cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "5IOzS361MB05",
    "colab_type": "code",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0.0
     }
    }
   },
   "outputs": [],
   "source": [
    "#  ipython nbconvert --to HTML KANG_Dandan.ipynb\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "lab.ipynb",
   "version": "0.3.2",
   "views": {},
   "default_view": {},
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "accelerator": "GPU"
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
